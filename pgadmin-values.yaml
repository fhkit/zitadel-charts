replicaCount: 1

## pgAdmin4 container image
##
image:
  registry: docker.io
  repository: dpage/pgadmin4
  tag: "8.6"
  pullPolicy: IfNotPresent

## Deployment annotations
annotations: {}

service:
  type: ClusterIP
  port: 80
  targetPort: http
  # targetPort: 4181 To be used with a proxy extraContainer
  portName: http

  annotations: {}
   
serviceAccount:
  # Specifies whether a service account should be created
  create: false
  # Annotations to add to the service account
  annotations: {}
  
  name: ""


strategy: {}
 
serverDefinitions:
  ## If true, server definitions will be created
  ##
  enabled: true

  ## The resource type to use for deploying server definitions.
  ## Can either be ConfigMap or Secret
  resourceType: ConfigMap

  servers:
    server1:
      Name: "Zitadel"
      Group: "Server"
      Host: "131.130.102.246"
      Port: 5432
      Username: "postgres"
      MaintenanceDB: "postgres"
      Shared: true
      ConnectionParameters:
        passfile: "../../file.pgpass"

extraSecretMounts:
  - name: pgpassfile
    secret: pgadmin-pgpassfile-secret
    mountPath: "/tmp/file.pgpass"
    subPath: pgpassfile
  - name: pgadmin-certs
    secret: zitadel-pgadmin-cert
    mountPath: "/var/lib/pgadmin/storage/zitadel-admin_netsnek.com/pgadmin-cert/"
    readOnly: true
  - name: postgres-certs
    secret: zitadel-postgres-cert
    mountPath: "/var/lib/pgadmin/storage/zitadel-admin_netsnek.com/postgres-cert/"
    readOnly: true

## Additional InitContainers to initialize the pod
##
extraInitContainers: |
  - name: prepare-pgpass
    image: "dpage/pgadmin4:4.23"
    command:
      - /bin/sh
      - -c
      - |
        cp /tmp/file.pgpass /var/lib/pgadmin/file.pgpass
        chown 5050:5050 /var/lib/pgadmin/file.pgpass
        chmod 600 /var/lib/pgadmin/file.pgpass
    volumeMounts:
      - name: pgadmin-data
        mountPath: /var/lib/pgadmin
      - name: pgpassfile
        mountPath: /tmp/file.pgpass
        subPath: pgpassfile
    securityContext:
      runAsUser: 5050

networkPolicy:
  enabled: true

ingress:
  enabled: true
  annotations:
    kubernetes.io/tls-acme: "true"
    # cert-manager.io/cluster-issuer: letsencrypt-prod
  ingressClassName: public
  hosts:
    - host: pgadmin.netsnek.com
      paths:
        - path: /
          pathType: Prefix
  # tls:
  #   - secretName: pgadmin-tls
  #     hosts:
  #       - pgadmin.host.net

# Additional config maps to be mounted inside a container
# Can be used to map config maps for sidecar as well
extraConfigmapMounts: []

existingSecret: ""

env:
  # can be email or nickname
  email: zitadel-admin@netsnek.com
  password: SuperSecret
  #pgpassfile: /var/lib/pgadmin/storage/pgadmin/file.pgpass
  
  enhanced_cookie_protection: "False"

persistentVolume:
  
  enabled: true

  annotations: {}

  accessModes:
    - ReadWriteMany

  size: 10Gi

securityContext:
  runAsUser: 5050
  runAsGroup: 5050
  fsGroup: 5050

livenessProbe:
  initialDelaySeconds: 30
  periodSeconds: 60
  timeoutSeconds: 15
  successThreshold: 1
  failureThreshold: 3

readinessProbe:
  initialDelaySeconds: 30
  periodSeconds: 60
  timeoutSeconds: 15
  successThreshold: 1
  failureThreshold: 3

VolumePermissions:
  ## If true, enables an InitContainer to set permissions on /var/lib/pgadmin.
  ##
  enabled: true

containerPorts:
  http: 80

resources:
 
  limits:
    cpu: 300m
    memory: 500Mi
  requests:
    cpu: 150m
    memory: 400Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

## Pod affinity
##
affinity: {}

## Pod annotations
##
podAnnotations: {}

## Pod labels
##
podLabels: {}
  # key1: value1
  # key2: value2

init:
  ## Init container resources
  ##
  resources: {}

## Define values for chart tests
test:
  ## Container image for test-connection.yaml
  image:
    registry: docker.io
    repository: busybox
    tag: latest
  ## Resources request/limit for test-connection Pod
  resources: {}

  securityContext:
    runAsUser: 5051
    runAsGroup: 5051
    fsGroup: 5051
