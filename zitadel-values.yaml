zitadel:
  masterkey: x123456789012345678901234567891y
  configmapConfig:
    DefaultInstance:
      EmailTemplate: <!doctype html>
<html xmlns="http://www.w3.org/1999/xhtml" xmlns:v="urn:schemas-microsoft-com:vml"
  xmlns:o="urn:schemas-microsoft-com:office:office" style="font-family: arial, 'helvetica neue', helvetica, sans-serif">

<head>
  <title>
    PhotonQ Verify Email
  </title>
  <meta charset="UTF-8" />
  <meta content="width=device-width, initial-scale=1" name="viewport" />
  <meta name="x-apple-disable-message-reformatting" />
  <meta http-equiv="X-UA-Compatible" content="IE=edge" />
  <meta content="telephone=no" name="format-detection" />
  <!--[if (mso 16)
    ]><style type="text/css">
      a {
        text-decoration: none;
      }
    </style><!
  [endif]-->
  <!--[if gte mso 9
    ]><style>
      sup {
        font-size: 100% !important;
      }
    </style><!
  [endif]-->
  <!--[if gte mso 9
    ]><xml>
      <o:OfficeDocumentSettings>
        <o:AllowPNG></o:AllowPNG> <o:PixelsPerInch>96</o:PixelsPerInch>
      </o:OfficeDocumentSettings>
    </xml><!
  [endif]-->
  <style type="text/css">
    #outlook a {
      padding: 0;
    }

    .es-button {
      mso-style-priority: 100 !important;
      text-decoration: none !important;
    }

    a[x-apple-data-detectors] {
      color: inherit !important;
      text-decoration: none !important;
      font-size: inherit !important;
      font-family: inherit !important;
      font-weight: inherit !important;
      line-height: inherit !important;
    }

    .es-desk-hidden {
      display: none;
      float: left;
      overflow: hidden;
      width: 0;
      max-height: 0;
      line-height: 0;
      mso-hide: all;
    }

    @media only screen and (max-width: 600px) {

      p,
      ul li,
      ol li,
      a {
        line-height: 150% !important;
      }

      h1,
      h2,
      h3,
      h1 a,
      h2 a,
      h3 a {
        line-height: 120% !important;
      }

      h1 {
        font-size: 36px !important;
        text-align: left;
      }

      h2 {
        font-size: 26px !important;
        text-align: left;
      }

      h3 {
        font-size: 20px !important;
        text-align: left;
      }

      .es-header-body h1 a,
      .es-content-body h1 a,
      .es-footer-body h1 a {
        font-size: 36px !important;
        text-align: left;
      }

      .es-header-body h2 a,
      .es-content-body h2 a,
      .es-footer-body h2 a {
        font-size: 26px !important;
        text-align: left;
      }

      .es-header-body h3 a,
      .es-content-body h3 a,
      .es-footer-body h3 a {
        font-size: 20px !important;
        text-align: left;
      }

      .es-menu td a {
        font-size: 12px !important;
      }

      .es-header-body p,
      .es-header-body ul li,
      .es-header-body ol li,
      .es-header-body a {
        font-size: 14px !important;
      }

      .es-content-body p,
      .es-content-body ul li,
      .es-content-body ol li,
      .es-content-body a {
        font-size: 14px !important;
      }

      .es-footer-body p,
      .es-footer-body ul li,
      .es-footer-body ol li,
      .es-footer-body a {
        font-size: 14px !important;
      }

      .es-infoblock p,
      .es-infoblock ul li,
      .es-infoblock ol li,
      .es-infoblock a {
        font-size: 12px !important;
      }

      *[class="gmail-fix"] {
        display: none !important;
      }

      .es-m-txt-c,
      .es-m-txt-c h1,
      .es-m-txt-c h2,
      .es-m-txt-c h3 {
        text-align: center !important;
      }

      .es-m-txt-r,
      .es-m-txt-r h1,
      .es-m-txt-r h2,
      .es-m-txt-r h3 {
        text-align: right !important;
      }

      .es-m-txt-l,
      .es-m-txt-l h1,
      .es-m-txt-l h2,
      .es-m-txt-l h3 {
        text-align: left !important;
      }

      .es-m-txt-r img,
      .es-m-txt-c img,
      .es-m-txt-l img {
        display: inline !important;
      }

      .es-button-border {
        display: inline-block !important;
      }

      a.es-button,
      button.es-button {
        font-size: 20px !important;
        display: inline-block !important;
      }

      .es-adaptive table,
      .es-left,
      .es-right {
        width: 100% !important;
      }

      .es-content table,
      .es-header table,
      .es-footer table,
      .es-content,
      .es-footer,
      .es-header {
        width: 100% !important;
        max-width: 600px !important;
      }

      .es-adapt-td {
        display: block !important;
        width: 100% !important;
      }

      .adapt-img {
        width: 100% !important;
        height: auto !important;
      }

      .es-m-p0 {
        padding: 0 !important;
      }

      .es-m-p0r {
        padding-right: 0 !important;
      }

      .es-m-p0l {
        padding-left: 0 !important;
      }

      .es-m-p0t {
        padding-top: 0 !important;
      }

      .es-m-p0b {
        padding-bottom: 0 !important;
      }

      .es-m-p20b {
        padding-bottom: 20px !important;
      }

      .es-mobile-hidden,
      .es-hidden {
        display: none !important;
      }

      tr.es-desk-hidden,
      td.es-desk-hidden,
      table.es-desk-hidden {
        width: auto !important;
        overflow: visible !important;
        float: none !important;
        max-height: inherit !important;
        line-height: inherit !important;
      }

      tr.es-desk-hidden {
        display: table-row !important;
      }

      table.es-desk-hidden {
        display: table !important;
      }

      td.es-desk-menu-hidden {
        display: table-cell !important;
      }

      .es-menu td {
        width: 1% !important;
      }

      table.es-table-not-adapt,
      .esd-block-html table {
        width: auto !important;
      }

      table.es-social {
        display: inline-block !important;
      }

      table.es-social td {
        display: inline-block !important;
      }

      .es-m-p5 {
        padding: 5px !important;
      }

      .es-m-p5t {
        padding-top: 5px !important;
      }

      .es-m-p5b {
        padding-bottom: 5px !important;
      }

      .es-m-p5r {
        padding-right: 5px !important;
      }

      .es-m-p5l {
        padding-left: 5px !important;
      }

      .es-m-p10 {
        padding: 10px !important;
      }

      .es-m-p10t {
        padding-top: 10px !important;
      }

      .es-m-p10b {
        padding-bottom: 10px !important;
      }

      .es-m-p10r {
        padding-right: 10px !important;
      }

      .es-m-p10l {
        padding-left: 10px !important;
      }

      .es-m-p15 {
        padding: 15px !important;
      }

      .es-m-p15t {
        padding-top: 15px !important;
      }

      .es-m-p15b {
        padding-bottom: 15px !important;
      }

      .es-m-p15r {
        padding-right: 15px !important;
      }

      .es-m-p15l {
        padding-left: 15px !important;
      }

      .es-m-p20 {
        padding: 20px !important;
      }

      .es-m-p20t {
        padding-top: 20px !important;
      }

      .es-m-p20r {
        padding-right: 20px !important;
      }

      .es-m-p20l {
        padding-left: 20px !important;
      }

      .es-m-p25 {
        padding: 25px !important;
      }

      .es-m-p25t {
        padding-top: 25px !important;
      }

      .es-m-p25b {
        padding-bottom: 25px !important;
      }

      .es-m-p25r {
        padding-right: 25px !important;
      }

      .es-m-p25l {
        padding-left: 25px !important;
      }

      .es-m-p30 {
        padding: 30px !important;
      }

      .es-m-p30t {
        padding-top: 30px !important;
      }

      .es-m-p30b {
        padding-bottom: 30px !important;
      }

      .es-m-p30r {
        padding-right: 30px !important;
      }

      .es-m-p30l {
        padding-left: 30px !important;
      }

      .es-m-p35 {
        padding: 35px !important;
      }

      .es-m-p35t {
        padding-top: 35px !important;
      }

      .es-m-p35b {
        padding-bottom: 35px !important;
      }

      .es-m-p35r {
        padding-right: 35px !important;
      }

      .es-m-p35l {
        padding-left: 35px !important;
      }

      .es-m-p40 {
        padding: 40px !important;
      }

      .es-m-p40t {
        padding-top: 40px !important;
      }

      .es-m-p40b {
        padding-bottom: 40px !important;
      }

      .es-m-p40r {
        padding-right: 40px !important;
      }

      .es-m-p40l {
        padding-left: 40px !important;
      }

      .es-desk-hidden {
        display: table-row !important;
        width: auto !important;
        overflow: visible !important;
        max-height: inherit !important;
      }
    }
  </style>
</head>

<body style="
      width: 100%;
      font-family: arial, 'helvetica neue', helvetica, sans-serif;
      -webkit-text-size-adjust: 100%;
      -ms-text-size-adjust: 100%;
      padding: 0;
      margin: 0;
    ">
  <div class="es-wrapper-color" style="background-color: #fafafa">
    <!--[if gte mso 9
        ]><v:background xmlns:v="urn:schemas-microsoft-com:vml" fill="t">
          <v:fill type="tile" color="#fafafa"></v:fill> </v:background
      ><![endif]-->
    <table class="es-wrapper" width="100%" cellspacing="0" cellpadding="0" style="
          mso-table-lspace: 0pt;
          mso-table-rspace: 0pt;
          border-collapse: collapse;
          border-spacing: 0px;
          padding: 0;
          margin: 0;
          width: 100%;
          height: 100%;
          background-repeat: repeat;
          background-position: center top;
          background-color: #fafafa;
        ">
      <tr>
        <td valign="top" style="padding: 0; margin: 0">
          <table cellpadding="0" cellspacing="0" class="es-header" align="center" style="
                mso-table-lspace: 0pt;
                mso-table-rspace: 0pt;
                border-collapse: collapse;
                border-spacing: 0px;
                table-layout: fixed !important;
                width: 100%;
                background-color: transparent;
                background-repeat: repeat;
                background-position: center top;
              ">
            <tr>
              <td align="center" style="padding: 0; margin: 0">
                <table bgcolor="#ffffff" class="es-header-body" align="center" cellpadding="0" cellspacing="0" style="
                      mso-table-lspace: 0pt;
                      mso-table-rspace: 0pt;
                      border-collapse: collapse;
                      border-spacing: 0px;
                      background-color: transparent;
                      width: 600px;
                    ">
                  <tr>
                    <td align="left" style="padding: 20px; margin: 0">
                      <table cellpadding="0" cellspacing="0" width="100%" style="
                            mso-table-lspace: 0pt;
                            mso-table-rspace: 0pt;
                            border-collapse: collapse;
                            border-spacing: 0px;
                          ">
                        <tr>
                          <td class="es-m-p0r" valign="top" align="center" style="padding: 0; margin: 0; width: 560px">
                            <table cellpadding="0" cellspacing="0" width="100%" role="presentation" style="
                                  mso-table-lspace: 0pt;
                                  mso-table-rspace: 0pt;
                                  border-collapse: collapse;
                                  border-spacing: 0px;
                                ">
                              <!-- <tr>
                                  <td
                                    align="center"
                                    style="
                                      padding: 0;
                                      margin: 0;
                                      padding-bottom: 10px;
                                      font-size: 0px;
                                    "
                                  >
                                    <img
                                      src="https://github-production-user-asset-6210df.s3.amazonaws.com/26285351/278545054-5aef6076-5fa2-416b-9322-4234587319e3.png"
                                      alt="Logo"
                                      style="
                                        display: block;
                                        border: 0;
                                        outline: none;
                                        text-decoration: none;
                                        -ms-interpolation-mode: bicubic;
                                        font-size: 12px;
                                        border-radius: 0.5rem !important;
                                      "
                                      width="250"
                                      title="Logo"
                                      height="64"
                                    />
                                  </td>
                                </tr> -->
                              <tr>
                                <td class="es-m-p0r" valign="top" align="center"
                                  style="padding: 0; margin: 0; width: 560px">
                                  <table border="0" cellpadding="0" cellspacing="0" role="presentation" style="
                                        mso-table-lspace: 0pt;
                                        mso-table-rspace: 0pt;
                                        border-collapse: collapse;
                                        border-spacing: 0px;
                                      ">
                                    <tbody>
                                      <tr style="
                                            background-color: red;
                                            overflow: hidden !important;
                                            border-radius: 0.5rem !important;
                                          ">
                                        <td style="
                                              width:150px;
                                              padding: 10px;
                                              margin: 0;
                                              padding-bottom: 10px;
                                              font-size: 0px;
                                              background-color: white;
                                              border-radius: 0.5rem 0 0 0.5rem !important;
                                            ">
                                          <img
                                              src="data:image/png;base64,iVBORw0KGgoAAAANSUhEUgAAALQAAABKCAYAAAASVX5bAAABhGlDQ1BJQ0MgcHJvZmlsZQAAKJF9kT1Iw0AcxV9TpSoVBTuIKGSoThZERRylikWwUNoKrTqYXPoFTRqSFBdHwbXg4Mdi1cHFWVcHV0EQ/ABxdHJSdJES/5cUWsR4cNyPd/ced+8AoV5mqtkxAaiaZSRjUTGTXRUDr+hGEP0YgSAxU4+nFtPwHF/38PH1LsKzvM/9OXqVnMkAn0g8x3TDIt4gntm0dM77xCFWlBTic+Jxgy5I/Mh12eU3zgWHBZ4ZMtLJeeIQsVhoY7mNWdFQiaeJw4qqUb6QcVnhvMVZLVdZ8578hcGctpLiOs1hxLCEOBIQIaOKEsqwEKFVI8VEkvajHv4hx58gl0yuEhg5FlCBCsnxg//B727N/NSkmxSMAp0vtv0xCgR2gUbNtr+PbbtxAvifgSut5a/UgdlP0mstLXwE9G0DF9ctTd4DLneAwSddMiRH8tMU8nng/Yy+KQsM3AI9a25vzX2cPgBp6mr5Bjg4BMYKlL3u8e6u9t7+PdPs7wc5fHKQKaJBgwAAAAZiS0dEAP8A/wD/oL2nkwAAAAlwSFlzAAAN1wAADdcBQiibeAAAAAd0SU1FB+YJDBA7BoL4ZosAACAASURBVHja7b13nFxXmef9vffWrZy7q3NO6lZLakmWrGArOOCADbbALDYMw8AAOzPwDrssMMOaGRjCMDsMLywsA4NnCIZ3WIPBQTYysi2sYElWzqFzzqG6qrpy3fP+UUGl0K2SbWSD6/Gn3a2qG84993ee83vCOY8khEgAMr9nEYCEQCAhpf6V/jyRSBBLaMRiCSKROIlEgilvgJGpAGMzc8mf6QAT3hADE378wQgTsyE0AVO+IP5QNOtOEnqdQqnbiiyB2aij1G3FbTXgcZkpL7BRUmilwG6mrNBGiduKXq9DVXUY9DpUnYJOkZGkZCvJtDTrSQQgSeTlTSeadL0AfakEglF6R6YZHJlmYsrH+ISXwQk/p/q9nBoLMBqIQDQBcQ3i8QuwkgGRHhACpEuaLl34KoNEkQailDxXkUBRQFXAoONGj4XFFQ4ayxwUeRx4Ch2UeBxUlbopLbBdMizJusHlcM/LHzmgE5ogkUgQisTo6J/iSPsQx0/3M9g7zuhsmNFADH9cI5IQWBUZh17CZlCwGHSYrCbMFiN2uwmDqmK3GpBlCYfNjNWkXsBsClOaJpiYDhCLa0SiMQLBKIFghGAwTDAQJjwXxhdJ4IsKfLEEwYRA0wSaIDl3SDJGBRyqgseso8Smp7TUyeLF1axsKae1phi3w4yqk5ElKTWW8oB+SwDaH4zSPzLN4PAke4738cQrvZwe9oEvArJESZmV1RVO6srsVBU7KC6wYbNbcTosuJ0WHBYjBr0OvapgUBUURUavU3J/Mk0QiyeIxjWi8TiRWIJwJM7kTICZ2TkC/jkmp/0MTvjoH/VxbniWAwOp9qmALCV/BKAJ0OsodJnZsryC21bVUF9dRGWpm2K3LQ+jPxZAi0v0Uzga50z3GK8c66KjY4jdZyc4NBZAFrC80sXKpmI2LKvghqZSrFYTRqMeg0HFoFcx6nXXXdfFEknOHo7GiURihMNhBsZ87DnRz55TQ5ztnWBoJoQmxAXCoQmQZeoLTayvL2BFSxlLW+tY0VKO22ZKUWvpCr2Tlzc5oJMvLBKLMz7l43j7CD/ddowDp0fQRILWMgcttYU0NpSxakk1lUUO3HZTyuDiTcFFRYpXS1LaWAUhBEIIguEYY9NznOoa5dS5Ac53jXK2f4bDYwFEXMtwHZ0EhSaV5io377ptMbevrqeyxI3FrE9dMS9vMkBfWdMEghFOdY5w7GQ3P3nhHPv7/WxZXso719WyqKGUIo+bco8do153jXr++kL68ntfAHe2jM8EGJnwMTo6yYuHunnq4ADtA9NZJF5AAkqKrXx4Yz0bVzewrKWG0gJrHmZvFkCLbMteJLVZMBLl0JkhfrHtCAdPD2E0qdy+rom71jfRVOXBbNJfE9f9g+sxIYhEYkx4A+w/OcATO05y4twIXd4wEU0gpbx65WYda1tKue/2pdx9UzNuuwVZTvdrXne/MYAWF9ytvrkwZztHeOSpQ+w5M8J711SwvK2B1UtrqPDYyPYyvzUkOdAjsQTH20c4eqKTHQe7+cWJMQjHkOQkcBESd7SV84kHVrF6aQ1FbhuSRB7Sb5SGjicSHDk7xBO/PcKzJ0b44K2LuGt9MzUVhVhM+hSML7yg14NAaJpGPB5H0zQSiQSaphEKhTJ/B8MhZEmiorwCg8Fw0bnhcJjh4WGEEJhMJiRJQq/Xo9frURQFRVGQZTnz+/UCd0ITjE75OHZuiB8+c5QnDvVBLJFSDAJ0Cu9bVcn9d7Rx980tWE2GPPyuB6DTWjahCWZ8c/xi+3G27TzD2hXVPHjXDVSXulBkCaRsCGcZdTkgWoikbzr9E4/H8c56mZycZHp6Br/fx+ysj3A4RDAYIhqLJkEhkoNHCIHdZuPB9z6Ix+O5mOuOj/OLx3+Jb9YHUpriSkiShMVsxmg0YrZYsFqsOJ1OCgoKKCwsxGqxJAGvU1DkJPBflZkpIBiJseNgJ08+e5DfnRqlxxch1Qw8BoUHNi3ik+/fSG2FG1WnIx+k+X1qaAHReJy9x3r43lPHWL+okDtuXkxTtQdFlpOAfxWhX03TiEQizMzMMDU9zdTkJJNTU0xOTjIzM00sHkcIkQw5p9xk0gL3sNvtvO+h91F0CaDHxsd47LHH8M7OzjuYLhUJCZPZhNvloqioCLfLTUFhIW6XC5fLhU6nW7At88lsIMz+4938ZOsRfr6vF0QiGfjXBKVFdv75Q+u5c0MrHqcFIaSLgkR5eR0ALQBfIMSPth5mZHyWP3vnDdSVF2BQdQhJuiZzJu3+CoVC9PX10dvXx9DwEH6/n0gkkqEPaeBmgzkb1K83oHMRWZbR6XQYjUZcTifl5RXU19VRVlaGqqpIKY1/NYotJIHQBN65ML/de45v/GQPp4Z9RLWk289jVHnH2lo+/7G3UVXmBgnkPKJfH0ALIegZmub/bj9OS42HO9c3YzLquADj7KSc+XlFIpFgdnaWsbExOjo76ezqZG5u7qoAzWjLHMD8+wb0fCB3OBy0NLdQW1NDUVERFoslRx6epErn+yZ47JmDfP2Zk8wFokipQGRbpYtv/PUdbFhZj17V5WH52gCtJUCSD5we4FjHCLevrqe61IUsX5uuSCQS9PX10dHZQU9vLzMzM0Sj0WuaqtPHXgro7H+nAW+32Xj/+95PUVHRdQF0dluMRiNFRUXU1tTQ2NBIaWlpDsBOPoM/GGHPoU6++O8vcaB3OhNaaiux8bcf2siW25dhUNWUvZDML8nLNQA6Fo8nTnaOygMTfm5fVYvZYEgp4qtbd0IIwpEwvb29HD58hKHhIaLRaM7a+FIwK4qCXlUxGIxYLGbMZkvGkLNarRmNqNfrsVgtFHmKUFX1mgFttVozxmg8Hp+XWy80g6Rph9FopLamhtWrVlNSUpKhJFezJ873T/K1HzzP46/0Ekp5Q0pMOh7+8CY+fN9qzEY1byi+GkD3jc4kpmZD8tL6YnSKdJm5NJ9EIhG6e3o4cfIEXV1dxGKxzIu8Gm1I82tZlikoKMBTWEhpaSlOpxOHzY7FZsVoMKKqak4AuVZAf/BPPwgI/P4A09NTTE5OMT4xztT0FLFoLDeOfMnzmEwmFjU1sXTpUqqrqi/zklxJPYxM+PjJU/v5x58fJJACdanVwFc+uoEH374Kk0Gfh+g1AlpX5LJS7rGj5OiTFUIwODjI/gOv0N3dTSQSucwjMR+YJUlCp9NR4C6goaGBhvp6HA4HBoMBvV7/OvqFF5bCggIsFkuGKsXjcSKRCIFAgL7+fjo62hkbHyccDuekuSVJIhwOc/zECTq7umhsaGTN2jV4Cgozz3Sl4VHqsfOJ923C4bDwuUd2MhuJMRyI8IVHdhFH5s/euRpVUfJuvWsQ3dVzLS5IMBjkxMmT7N37MoG5uZwHgKIoeAoLqaqqprGxgdKS0gyg3mhJB1sMBgN2u52ysjJuWLmS8YkJenq66e7uYWx8jFAolJPWnpub49jxY/QP9HPLps3U19djNBrnpz9mAx++bw0SEv/y6G66ZiMMBKJ89Ue7qSxycMf6RchSMuKYx3MOgM4VlOPj4+zZs4dz58+T0BI5ewbKy8q5YeVKysvLcblc100LvxbR6/VUlJdTUV7O8rblTExMcOrUKc53tBMKhXK6xvT0NE8/s5WlS5awft163G73vMca9AofeMcqFEnwuR/sYjoco88b5tuPvkRNqYum2uLMQpy8XEVBffGLX/zCQn2laRoDAwM8/cxW+vr70YSWk9YrLCxk86ZNbNy4iYqKCsxm86sKTlyrzM3Ncfr0acIpKnQlWb9uHXp9bvzUYDDgdDppaGigpro6Q03SxuTVjL/RsTFGRoYpLirGarXO0wcSqk6hubaYSDjM7jPDIASdk0EMIs6GFbXoVSUP6Rx074KAFkLQ1dXF1mefYXp6OhdVjsVqZe2aNdx2223U1dah1+uvC5B/X4BOc+S0H7qpsRGPp5BgMMhsjq5Bn8/HwMAgHo8Hh8Nxxf6QAL2qo62xlMiMl1c6J5GAfZ2TrKx1s7iuJA/XHBC44Pzf2dnJb57bltOLkySJkpISttx3PzetvwmX0/VH2WOqqtK8qJn73vFO1q5Zg06Xmw0yMTnBtue2MTQ0tOBxboeZP71/DeurHaSsVh799X5Gpvx5uOZCc+f7Ynh4mO0vPM/s7OxVNawsyzQ1NvHud72burq6nF/yH6pIkoTD4eDWW27l3nvuwW6z5QjqSZ7a+jSTk5MLXBuWN1fwZ1tWISsKEvBK5xQvH+4goYk8Yl8NoOfm5tiz92WmpqYWdMOlv1vS2spdd95JQUHBW8sAURSWtC7h7rvuxmrNbWXK9PQ0u3fvXsC4lJAliS23tXHPigqEJhgPxdl1qItAMJzawoEsV15eFgS0EIIzZ89w/vz5nDRVQ309mzdvxuFwvDU7UJZpbGzk3nvuwWgwXnU2E0Jwrv0859vPL6AoBAV2E595/3qQFQQSP93fx+SMP8vayRuIOQHa6/Vy4MCBnAIKNpuNDTdvwOlwvrU7UZapq61j3dq1C+ZRp8Eei8XYu3cfwWBwHjgnU1obaop51w3lSGh4Z0IcOD2YUtAiS1PnZUFAnzt/jhmvNweHhmDVDTdQUVGR70VAp9PR1tZGcVHxvFo6W0lMTU9x9ty5BaY/KHRauHNtHQZFBk1j3+nBzPqgvILOAdCRSIS+vv6ctLPD4WDp0qV/EIGS6yV2u51ly5bl5l8SgvaOdmKx2BWwnAyj6BSFxvpyys0qyBKnuyfSmy3kOzsXQPsDfqanp3ICdENDAxazJd+Dl0hLSzNGgzFnA9HvX9gd11DloaIw2c+Do14EWgrOeRV9VUCHgqEFAxLZXLC8tOxVrrv74xazyUxZaelVlUI6oSkQWDgnxmkzUVLqBgThQJjkmhYpr6Pno37ZU2AkGslMgQtNbBISdrv9ukYAr8VAs1itqeVd0hXMrd+vSJKE03V1I1kIQTweJxpdWIGYDSoetxWEQFbyC7RyBnTyZciZXOAFNYwkMusB32zidDh5x733XliviHTZipeFst+ul+SqDBRZwmBQQYDTbcsMSilPOxYGtCRJGAwGVFUlHA5fRbvAjHcGTdPedEahqqoUeYoyWvB6zyJCCHw+X86eEX1OSfwCNEFtuSszz+ShnAOHtlosmM3mnF7awMAAiUTiTf1wbwQlCoVCDA0N5RRgMZlMOUUYEwkNNIm1reWpOSefTJoToG02G55CT04ndnV355xt9laS9vZ2QleZ4dJS4C7AZl04DyQYjjE1MwdGHTcsKntT2i1vWkArikJjY0NOyUWhUIj9r+y/oh/1rSr+gJ+jx4/lvGyrpbn5skW+l10zGGFszMv6ugJa64vznXwtgAaor6unpOTqubeyLHP23Dm6urryfn6SaxPPnDnD2NhYTpStoKCApqamqx47ND7L6FSA+26qw2Ez5zv6WgFtNpvZePOGixLgrzTNpXdFemnnS4xNjL+qrQv+WEQTgoHBAV7auTOnGctgMLB506YFvC0ic93T5/uRZIn1qxoxGtQ8Yq8V0ABVVVWsWL5i3o1fsmVsYoLt23/L+Pj4W7IDhRB0d3fz9NatmRXwV6Mai1sWU1dbN3/OR2pPV68/xCsn+tm4spobW6vzZuCrBbRer2ftmjXU1tRc/QUBvX19PL11K729vW9a//Tvi2Z0dHSwbdtv8OaQ0AVQUlzMxg0bFvSFp+s4jo7P8GLHNH/x3pvRq/mcmVxkwf2hJyYmePY3z9I/MJDTxew2O5s3b6alufmyfZv/2CQYDHLy5El27tpJOBLJaU++8rJy7rrzTsrLy6+m9wlFYvzDIy+yuMrN++5ZhU6Rybvqrs7+rlpjZXxinO3bt9Pd07PgS0t/p6oqi1tauGHlDZSXl//RuZk0TaOvr49Dhw/T3tGesy++vLyct991N6WlpTkdv23vOXYdaOdv//xtOGzGrPkwL68J0JDMCnv+xRfo7Oyc9wVeuq+z1Wpl6ZIlrFi+AqfT+QefyBSPx/F6vRw5coSTp08RDAZzMoRlWaa2ppbbb7+d4ks2lpxPBse9fPcX+/nI/aupr3CTr1z7OgM6PcUeOnyYg4cOMpfjrkkATqeT5cuXU1dTi8fj+YOjIuFwmMnJSdo7Ozh58iRerzenWScdCVy5YiVr16zJec1hKBLj2T1naKrysKyx7CKvRx7MryOg01pqcGiQHTt2MDwyck0GoNVqpbysjMbGJupqa7FarSg65U1ZPCeRSODz+ejp6aG9s4Ph4eFr2uNalmU8Hg+33XIrVVVVOewBkiwEomkau4/34zCrtDWWIsn57LrfK6DTMjc3x5GjRzh56hTT09NXBfZldMRipaqqksbGRkpLSjEajRgMBnQ63XVPdkoXKIpGo8mCQyMjdHZ10tvbe00gTj+b0+GgtbWVVTeswm6353yuAPpGZkhogvpydyqxKq+Vrwug01PqxOQE58+3c+ToUWZnvTkZjdnnA5hMJgrcbjyeItxuF06nC6fTgd1mx2AwZKpVvVagZ1fUikaj+Px+vN4ZvF4vM9MzTExOMDE5mdle4FJacTWfvNVqZcXy5TQvaqa4uPja2isEQoJoLIFBzRcRekMAnQ0Un8/HsePHOX3mND6fj3iqAFAuwM7+PL3puaIoqDodFrMFi9WK1WrBZDKhqvrUbxWdTqGxsQmzyXQZ1+/s6iQWixFPJAjOBYnH44RCIfx+P4GAn2Aw+Vk8VYUrvV/1tQBYQkLRKVitVlqaW1ixYjkupytH43d+wCbJB9cG6JzzSf/QEk+vub2vHdDZ4vMneWd3dze9fX0EAgE0TXtNrrv5wG9Ll6S4Qo2V//vYY8zOzs577rVI9gBMb9JuNpmorq6hrq6OurraHLdxEFmvJ13d8fIFCBcWdOdWyPTCALhqLb0LJXJeE6gv1KXM+d6vy91yA/TrumeX3WZn2dJlNC9qJhAI0NvXR3v7efr7+4nGYq+6VMV8XHy+rCiJ154Lnb5XepGATqejsqKCRU2LqE0ZtQaDIef7ZFflFal6hrP+MIoiYzWrySxnKZm/IeVacUwIkHLXY5IkXTIDvIoZWSTP17KciRLimsv85aKbRepe13L9130TuvTKF71ej9vtpm3ZMoLBIN093QwNDzMxMYHX6yUYDGam+9eira/UEwJedbJUmvaYTCbsdjvFRcWUl5dRV1uHJVWc81IQ57Iy5kKJ6Qgv7G/nkacPMzIZAKCyxMFH3rmSNUtq+PjXnuC/PbSOm29oyITArySRWJxDZwZY2lCCzWJccHpOaBon20ewWg00VBS+6nfb3j3M2k/8jHJHMtCjN6isXVzKn9zVxqrFVaivY433RELjM995jtWNHv7LXTdcoVzKdQL0pZpVp9Nht9tZ3racpUuWEgqHCPgD+Pw+pqammJiYZMY7k1nSn0gkLjKoFgSKuLJ6lnIYDGntqygKdpsdh8NBYWEBhR4PBW43NqsNq9WKyWS6an54rlraH4rxyC9f5kcvnOVv3rOSxQ1lSED/0BS9Q9MsaShjNhAmkUhkPcPFVCUN3EAwyrefPMrXP7oJu8V4WadommDGH8FlMxKLJ3hx/zkcbvsVAH1lPn8luiOExkwCtn7mLgyqjmg0xgsHurj/y0/zo7++nTtvaklWGb7yG8i6j7jk95XflT8UIRZL2WNZh1748/Lzr+s2oYqiYLVYsVqslJSUoNVrJDSNRDxOLBYjFosxM5P0PHhnvfj8fsKhELF4nFg0iiYE0WgUTdMypYwvu4esYLc7kFL1vNNFhwwGA7qU5rVabbhdrmSRIqcTvaqi0+lQVfV18ajMJ4dO9vDY9pP8r7+8gzvWLUrWT5EEbS1VxGJx/KFk6unsXISj7cMYVR31lQXoFImhiQBGvcK0L4QkCcoK7XzmvWtwu6zE4gm6h6bxzkWoL3PjtBp56Ug3B070cs+mJVQUObh70xJMRpV4IkHP8AxTsyEqi+2UFNgRmsbA2CxWs57BCR9mg0pdhTtV3+USTJpUVrZWY9IbEJJgWUsNHpeVbz26i+b6UurKXMyFI3QPzhCKRKkpc1PosCAQDIzNEgxH0SkKxS4LNkuy4trAmJdgJIYiQbHbmppxLlYUsXiCnpEZvIEQNSUuPC4LkWicoUkfhQ4zXYPTVBQ7eMP2vU0bWLIso6aqtgKXlW5IJBJJb0TKcxKPx9GEQE6F1y8Vl8vFli1bEKkFvGmKoNPpMh6UN0ISCUF//yhlhTZuW9uEqlMyWlCRQTHomYvEiccSfOtXR1hcbmdf5yT/+Oc3s3FlA9/9xcuEwjHODM9ydirIE3/7dj7+3R384n/ey/GOEb7y05epL7JSUezi9nWL+Pz3XsAfiLD33Ch/uWUNne09CJOVdYvL+OwjO3HqJGYicb736bdTXODga49sZzomUWBWOdo1wZc+spE71jUn67tcwcODlCyRbTXr2XjjIn7xm2N09I5h0uv4l0d3cqRrArdFxRfR+PsP3szyReV86d93cKJvGrfVQFQTfOFP1rGytZrvPLqD7WcnKXWZCUVjPPzgWjaubsxs35dIaPzsmYP8clcHbrMKssxX//JtyAje99WnuWlRMfvPjtBaV/zGATrnZfxpEOa4476iKDiuIaBx3QCtCYLhOEaTAWPK1yyJVC0gQfp/yIrEf317K7ff1Mqvtx9h+75O1rfVEQ6FicQ0HvnsPUTCMRSdwtBsCCE0zvVNYdZJ/NV7b6Ky0I7VYmD9kgo8JpkPbFmHzWLi3Ml2onIcp93Mv37yDlRVxz/862/Zc3yAd91iJx6O8MAty7hz3SL+989fZvcr7dy0vB6bWX8FkztbaUsYDSo6WSIcibF1+2EmJ7z8+9++A4vJwMsH2/mf/7aD/+8fHmAuFOFTD6xk08p6tu89x9d/9BJf/dQ70aJRPnjrIv7k7SvYd7yHr/54F021nlThUYnOwWm+8vgRvv6hDVSVF/DsC0d48qXT3L+phe6JAP/9vuX89wfXE0skyCfZXifR6WSKCu2MjHrpGZ5OMkop5fySUpuJCoGiSBQXOnDbzVSUOPGHkoVMBRJrllZRWeykqaYYvaogp2joe25bQkuZk6/8+w66hidx2kxYzAZsViMlBXYsJhUkDUWC6lIXk94g33/qCOcHZ4hEU7ViZImaikJcdjOVpQ78cxHilyWiZfHglA9Q0wTnukeZi2k4nDYGhiZY2lJJfaWHkkIby1urmJiL0T82iyxJuOwWyouc3LislkQ8zqR3DkkCu9VISaGDm1fWMxiTmfbOgUjGJrqGpwkFQrz4ynke/+1RZvxhZEkAArNZz7q2WipLXNSWF5IvLH2dRJYk2lprMduO84Of7+JP7l9LRYkLhGBs2s/Q6DS1lUVJlX1ZaCHp71BkCSmjgy4YX3ENPvORt7Fj/zm+9sgOFn2lCElOrhiPJRLMhWMkNIhrggMnevjyo/v40kc3I4WCF2wzcQGvyXtoV7a4NcGMP4TBoCcajXO2a5gfPr6Puze2sLqlnEMHz9LVN87k7Bw2k4GOvgnmEoLSAiuagEg0QSyu0dk/QUITWE16hIB4QiOe0DjTPYZRxLCYjcmmCY2aEicms4F7Ny9hVWs1gVAEXyCccuhJKUM0+Sh5QF9Hqaso4Csfv5OH/3U7h772ayrLkjkbo+NeWuqK+K8PbUKnKBkXnyRJ6GQZIYGiyEhZxqoALDoZJPjx1sNMjM8QjAkK7EYUWWJ5Yyn/8qOdjMyEqCx14Q/HsVgkYtEYE74gu471caRjjEFflKbqIlSdnKGBsizNbxj7gnzmX7YiKxAORRmbDrLpxjo+/tBNWIx6bt+8nBe/9Syf/vrT2G0mTnWM8qUHV1HgsCCj8YNfvcLOg50cOzvE2ze30lRVgBCCx58/yfnecU6eH+Gjty2irNiJokggSTRUFvDhW5v55k9eorGmiEAgREN9KX96V1umDzIE6PWMFOYlt4DB1OwcB071Mz4xiyRBUaGTG1oqsVsNPL/vPEubSqkucdE1OEX/6Azr22p55WQfhS4bi2s9SFLSE/K7g51sWlnLtD/CoVO9hKNxVrdWs7iuiEgswfa955ienWPZogr8gRBms5HaMhc7DnQgASaTnrlghLXL6jjbPcyyRRWUFtg43T3G6OQsNy2vI7sw69jULNv3tiPLMpIksJiN1FcW0lxTlFpRk5S+US/7jnUTicRorC1m9eIKItEEH/nKr6gtcdBY6aairIDNK+uJJRI8/M+P40fPhrYKSjwONqysx2RQ2XW0G7fNxJL6UubCUXYf6WJkzEthoYObl9ciIdh1tIfbVjekffFaHtBvoGhaMtInX1JWWsryt17sspUu9k9nBXRSFDxzrXSUTRMgy8nfUur8dK3J9NUkSUpFKC+EtBGXG+7pz0XqqAvR2iv7kkWKaiEE/lCUP//yr/nQvSu4c10Tkpy8eyAc4/Nff5zFrXV89F1rspYyXOmvZJ+lfd0iXclAktPHaHnK8cb5LZHlbAIrkY7wXhqCuBgzIuNduCjYIqSkkZi9maMkpYyndKRSZPj8RVFVROrc9JUXCJBLIKFd0IFXKNmcOVtKhviTgxbcdgN6fTJ7UqTbjITVYsJk0GU2c8/2+qTD+1Kqrcma9Be2ebjMqshr6Hmo4lyEc90jxGPxJHgkKC92Ul32elX6uhCLG53yMzoxS3NdSWqKF5e4yURGQ18A95WjbZdF0bLAcel3Fw8NwcUJUZdq3uxQnUiPmCy3pMaxc0M0VBaSEIKewSmWNZaiqgpCSGhCo3fYS4HDhNNmyrRL0zR6hr20D0yxtNZDebHz4mjvJQMm3YqOgQm6+sZpqS+lqsSVPkTLA3kesI1MePncd57jr7/1HA9//wU+/28vcvRM/2UurEwRn4u05wW3gbjoeJH5DyRSypOjHcN89z9345sLXyGcn11TRSS1XuYO4iJuklr3kmyUSIHyEs2bFr5ugQAACxFJREFUHiQi9e9Lw9uSkEhHmrPbTdZziixcp8PUsXicz/3bDianvPQPT/HZH/yOcDSeGYeKJFNf4UqCOau1sqxQW+7muX3tnDjbm1UL6YIXJ0lfROZxeodn+PJ3t/GPP9vHwKg32QYp2a485ZjHcNM0iITjfPmv7mBNayUIMtpTZJRUmkdeosnSAZOUphMZTEoZPZkeCBISibggEo0jBGgI5NQ3F2vPNLOQMt9mlKWU7dyTU4o5+zOy2sBlCZnZBCM9VKQsSpFO9pKlS/MwsgaMAG84BkIjIWA2lM6ulNCynvWiqnTplNbUtg1C05JtSY8YCUSKtqRpiBDQNzRB90yER7/wbkrcNk50jNBQ6cFqVvOAvjJNTIfvNALBKLP+MAJwWo0oisSuw1309o4kd0FqrmJ1ayUJTbDt5fOUF9k5daYft9vGmrZadh5ox+f1UVJayK1rmzGoMruOdNPdPYysyKy/oYmEpjHpj/Dki8eR4lHq68q4eWU9vkCI3x3qYsstS9GE4KWDHRQV2HFYjRw+1Y9BrzA6OklJSQG3rWvBqCocbR/hbOcwIpWHftu6Fg6f6Wd4aAKLxcgt61spdJrZe6KPwaEJhJBQVR133dzM5GyI3QfOEY/GWNRUxbq2GmZmgzy36zThUIia6iI237gIoQme3X2ayfEZ7A4Lt61fjN2sv3SiQgDnukd5+VA7CMHq5Q0saShlyhdkx76z+Gb9OJx27ri5FUmSON45ztjMywgBG9Y0U13q4pUTvZzvGEDR6bhlXQsmo4HnXz6L1xfi5LlBDkaifO/xgzxweyst9WUsWLz+rSyT3gBP7jjNnqN9vLjvPL/ZdRa3TeXouUG+/fN9OF02xmdD/MfTR6gtdVLstvKJbz3HoVMDxIWgZ3SWmUCYf/75firLChga97G0sYRdR3v54nefx2Q1MRuMYTXpiQr4j20naapwoyk6/vmxA7xtVTWxSJQHvvk8n3zHSqJxjR/8fCcJJBRJ4nP/ZzuqXofeYuZ7vzrAqqZixmdDfPr/fQZZltm2txN/OE5RoZ1Pfus5igodjM0EqSyxc+DUAN98dBcaMr/83VnMZj01FYV85htPE9EgIat8/8nD3NJWyVO7z/PocycoKnIxPumntaGUnzxziMeeO05VdREvHuhmxuunramCR397nAc2NBFOCJ7Z38V7Nzfzpf94iXODsxjNBkQiQX2Vh7/73nPsOdyDyW6ja8TLykWl7D7ex6FTgzQ1lHGsY4QXD/Zw66pavv3YPoJRjQNnhjnaPsqqxRW8cKCLjpFZqstcnOgc40T7KOWlbgrdZpHX0PNQjnSJ4g+9axXLGpK7sSYEfO8nO/jYA2t46M7lxDXBfz69nx89e5QVzeUEYxqfuqeN+zYvJRCOcvj0ALJOYXltASuW1GEx6fn1Cyd46I7F/MVDmzCoCuFonOcPdLK+sYC/es9aLCY9u472Mu0NUuQ0MZPIYrOayPDbEpeZTzx4M5XFDvafHCTg8zEyB8ur7Pzdx97Gz7YdIzAzQ3VxMoxe7TTwto3LqCl38+LuM9y8rJzPfvQuPvedbTSVWDl+fojJCT8P3bGEYqeZ7a90cqpzBI/TDAjWNheztKUKTQi27TnH8vpC2qpcqPEY33nhPH967+osGzTtTYG6Ehsd/RPcvbaRhppiBsd97Dk+yA8fvo+Vi6sIx+KpEL7go/ct57/cs4ZT5wd42+ef5PsGlb/54C0gCbbtPMW/bj/Ll61GHti8iIGpIJ/9wEa27z/PaN8Yf/PBzbhsxrx3Yx7PVMqtBq0NpaxdWsPapdVUFtnxhqJUlbqSCwFkiZYaD90Tc4AgIUnUlxcgyxIOs4H1bbV8869u45FnjvN/fraDvjEfoXAMT4ENvU5GksBkSKa3Wg06ZCXJf4165fIFCuJie1HVyRhUHbIEVpOKlkhw4+IKjg+H+ML/fopnXzpJXXUxNaUufvDZezjeM8Xff+dZznaPcuPKBnYcHeDhbzzByfYhaqpLiUZiKDoZbwRGfDE+dv8q6qpLuHdDC//jwXV87Wf7+Mmv9jDlC5GIaURQGPRGcLgdfPGhtehSyf1ZlBqDXsfH3rOetuYKPvWt59ix9ywjU35cZhWHPTlQjDoFVVEQEtjNBiSRTDDTpeyAAye6+acf/o6+yTkUkv5yIS4Ut0vz/kTKt54H9Hw6OuUik7KsbpfdzNK6Ip5+8QQDI1N09Y/xva1H2LKmBkmSL3NQnOoapdxj4+PvWcu2Y0PMTPtYVO1h1ysdnO0eZWBkmvEpHwlN4+LVc8kfSZaxCUH/yDR9w5OMTPi5KPEi5TpLOzQ8LjMOu4k5VD7+vo2845ZljE4FiMXifPL9GxifDXO+o5/qsgIiyOhsVv7uL+7kllUNtC0qR8gK1YVmNq+sYWVjMVaTjtNdoyxrKOFjW1bx1Ms9BINhmuuKMEka65ZUsKGtiiKXGUm6uFqzhCAciXO2e4wtm1u5c30jT+48S6nLgj+qsfdQO/3DM/QOTzEXiqazs1IO86RXY24uyqd/vJf339XGrSuqiCOY8QXRtAtGrE6RCUXiDAxP0zc8lTcK59PROkXG6rKhV3UZLWAzG/ngu2/im/+5m7s+/wRIcH9bCR+4dxWqTqaiwJrMv0519+hUgIcf3YMkYFNrGU01RdRVefjWT3fyzq9sxW7Q8Ym7l+DxODHbrSiple9OuxlVVSh02fn4hjoe+tqztJTbmdQUjEY9elWHzWFLBRnAZTMj6VQ6B6d5uXOcW2tdtLf3Y9PLeDxO/scPXkryaYuRRY2VnO4eZWQywPTkLKdP92DVyyxpLOdTH7iJT/94H3pVwaoqfP+/3UH7wBQf/tVhVEliy9o6mqs9/D8P3cw//XAHb//Ck5hUhfeurWF1ayWlbivIMjqdjrICGwJ4/kA3zxzpB5HgM1tWUl3m5n99/Da+9tO9fOM3ZwkDWx++F6fdgqxL7n+tKApVHjt6Vce7V1by7ccPoBj0RGNxtu3rpLncjttpBQQttcWUVxfxnn/6Dcuq3PnAynwaWtMgGouhqjoUWc6EpIWASDSO1x9CUSQcVmMqWV8iFo2jU5UM0OKJBIFQhGAoistmxmhQEUA0GmfWH0IgcDssSLJMIp7AkMqbiMbi6BQFWZGIROLM+ENYzXpUXfLaspTMTlNTlCMSTeAPRfn7bz+LyWLk9nWL6Bma4p9+eZgXv/4eygqdzPhDOK1Gxr1zfPbrT9G2tIYbWyvZebSHwyf7+PE/vIcitw3fXIS5UBSnzYjZaCChafjmQoSjCQocZgyqSnJ31CgzvhAGvQ6H1YSiyESjMfSqDkFyhYlB1RGNJftKkiTcdgs6JWmLhEJRZufCmI16HNbkMjFFTi7ESGgasWgcg0FlLhTFNxfBbjUQCEaS/a0oJDQNvV6XfB+RODO+ORxWUz70PZ+GlmUwZpVcS09xkpRMaC/J3k0/lTdhSH+W8r8qioLTasZpNWV8t5JInn/pbvyqImc8vAa9mvH3Gg0qpZljRVb7LmTlGfQKwXAyIO226Cmx65GiJgwmFVVWsJgNWMzJPQWn/SE0WabEoafEoWdJpYPjZ3VIkoyiyLjsZlx2c6YtsixT4LBezOUlMBsNmI2Giwh+dn8p+iRtMuhVigsubr8iSVgtBqyZxb2gz0qCUmQJxZg8x2o2YDUbQIDVdOF+CnJmdb/JqMNkdJLPtvsjk56haX71u1N0jfmx6BXuXd/I+mXVGdqUDFELTnYM88Tuc4x7wxRY9bx7cwtLG8tSK6v/oD242v8P7kGG7AsKc6wAAAAASUVORK5CYII="
                                              alt="Christian Doppler Laboratory"
                                              style="
                                                display: block;
                                                border: 0;
                                                outline: none;
                                                text-decoration: none;
                                                -ms-interpolation-mode: bicubic;
                                                font-size: 12px;
                                              "
                                              title="Christian Doppler Laboratory"
                                            >
                                        </td>
                                        <td style="
                                              width:180px;
                                              padding: 10px;
                                              margin: 0;
                                              padding-bottom: 10px;
                                              font-size: 0px;
                                              background-color: white;
                                              border-radius: 0 0.5rem 0.5rem 0 !important;
                                            ">
                                          <img
                                            src="data:image/png;base64,iVBORw0KGgoAAAANSUhEUgAAAMgAAABkCAYAAADDhn8LAAANV3pUWHRSYXcgcHJvZmlsZSB0eXBlIGV4aWYAAHja1Zhbkhy7DUT/uQovgQQJglwOnxHegZfvA/ZoJMv3RvjaX55Wd7WqqvkAEpmJCucff7/hb/xlTTUUtVZ7rZG/0kuXwZcWP3/9faZY3uf7Wz+upX89H2r5uiCcyhzz5782vu7/cT59D/A5DL7pLwN9TzD/9UL7uiDtt4G+Jsq+IuHL/hqo/7gunwvpa4X9fI5Tvm5oP993yfuZzs8l/3/49UQxorSV8bLIySlHPnOWz0TZ35IHx85n4h7W9b7HXAKHkr8Ce30V5d/j8XvAv7/9EvAQf0nS7wGX8vWD/Fuc6vfx+3z49ULSPw7si94vK5Lx9U1+nv+saMYVf/37NbB3t/v2zC5GqUSxfm3qxxbft8CNhPqFqbGyGo238t3eq/NqccRFNjfTTV4r9SRk4qaSdhrpppN24MtKizUWOWIcRZbkd65lky4re26Kv9IVI0s7N7K3XkZLls9SQvFA9vdab7bGzDtxqyQGSy/l/8Er/Kc3/tHrXg9tSh5LL5H0SbA48FiGZ84/uY2MpPsVVH0B/vH6/S8FhzEp1BfmxgZHnJ8hpqaf2Mov0Zn7lOOnjJLtBwxPVAnMrSwmZVIQa3JqSdFELCUC2UjQYOmSi0wykFRls0gpOVdy08Sn5icW0rtXVD7n4SMyoblmIzfUEckqRcGPlQaGhmYtqlrVtGnXUXMtVWsN1aoT27BsxdSqmTXrNlpupWmrzVprvY0uPcN72mu33nrvYzDnYOTBj0cLgzNTZp5l6qzTZpt9jgV8Vlm66rLVVl9jy84bath1226773HSAUqnHD31WDjt9DMuWLv5lqu3Xrvt9ju+s/aV1X97/YWspa+sycuU32ffWeOs2VdBA5fgg3jOyJiURMaNFCRnLc9ZbKkU8cx5zmIXqkKFRarnZifPGBksJwXRm/jlJ3c/M/eX8xZq/dO8yV/JXPDU/Q+Z+85bOPaVtz/I2nZtWy9jnyr0GoyZ6uOeIY1/MX4dQ/ztxH97/H8bqGAuxtB2QaPUFnO2heuAATqZPXccWH5PWRbDzDINppC5zO5Jed1Haiimnax73dbvqsR28T4AEMJZ5xq+ZLs8tmKw+AzbkFiNk1yiVgDS9mHqUeymDX50x+HD1pbHsTm6k1I05L5StCn7tZzaDNw1z5kpzyq9gcdRJaumBh1nZMjuHYORbduq+YhojRtgbKaMYF/2SmOmGy6+g4nZld0+AOKZ7VaPEqu6t5ULKj/z3gUW8WVxrsL6mX2cvJJNk1pCWxRSA2HjZmEdN/dlk5XtG+e8x7WVWWbroPOWelNl3nJbtVJs8+P54hLWyGvKnTl3iaYrXR27NWo5j31yp573GfHkLbOl2+Y1UskkLs4Qii5KP/YV7t6UEruWUbfYkXq4f/dc562TbXKCqdKhxJMS/Hx6X2rlzggVUKdL9WoN1Py0tuqk0vueRR81RmCg+yLxcwmRfXmzuKXpYuxeCV1c7GP0TA5qv6GM9VBDnqsfwV5UH2r6/85iQyBrnTnjJSeLEfQouzxFRmsj19Rv7wUV6beeqWtvG71ApSwMyjNQdLiYIL4Lf2GcW5nl9nQeroiSLxTMfaYMLZlbIFXjLia3mUqFZm6ByczkFKiqsHyEFY9RN6R5LgSUihJGdVuz5u2hd6AG2wKS28THFsJ5bgRMx3TvJJvbc7QutWrcsNjZmC/qS6ZSWfOupCfku3E/Dhpi2snesp6JdFcZqWCSzeM2pm9kadty1tkC0CH3fdbSiwmiNkLBMMWHQmAKdrBfcProZyf2k/Ke7cjoNlEP+BraHdg0JdTUdHEeBmhp5LDBUeqNQbpmL38rChCBNLaL6H2K4yQHy6d82QtEY9ch+f5PTDIDIRYQNmMwMDC5PaM73LfJYbunqxslOagB5RsRBP8x1U8donCjEeGjdwWNeRlm0vYgaP0QOCSgTpQCeWrE8iBnEFD1smi4MRCykMFlJe/KdSJEkMNCRpRNoqz72NvE7KycWu5TiRTkNoftfHJTEDIriEQeWbRdWCYaYTnnhjM9NXwyDnhkNWlZwkzX22sWVsrk1B5sVOdpFLSQ/57jhkvQS1S8U2EA8l4zagXMVF+PKUDd7us8FvEhi/okjER4bkSXTu2edYF9c0ajjqnui4mwMV84J6m9NIilOv+c60MwwvforzV748uPa2/0RsQxER+ah67gjpEaeaoE3f60pn6UlLFRziQ2k3xHTiOlLiBI3uUCvFIgxoxQ9wWs4WbSoQQFBF/yneLGQ0C4feQD8wwollZAAoVjGNZDukdu68kRVNBgF6oAnQEPzwh0yIfepG2KeMzKds7c8DhLhy0U55+er4Gc8ES4mJKqsohoaVH+KBIUjt1afV4Ymqwc3mBtDGJDe1n7tLJGQOicvSPm+3g0jRVRWkRdQQxRZ6NEqFRkj4aXzgkfgylT3gWJWOeUSU2GvTpk7fco/ziCiYsTwurD+2gc4oUG46Wejp/tSfR5XDIetwqseXPAK2XURwkmTVQXrjJbqY36LhS6gglzTBCOhVONVB391QMKREr9XRByR4gd5kDU6oEfkQ4p+6Q+a0dHzmpwTGYvl7zkSriO+KMLKnV6hmEvaBCKEQ33oQNNey5kTlfWBzN3a/ttGDXgyFIppEU/6pcxDLDg8NKECpGCAOnZyh2Wbm2O1hP+T1QR8kILevuCc1EgZKQ1hNglBcreGNZcV/QAAynsYrATSxrkHZyk6xqXSf6myJEWyDHJrWwbygGBI0dgPvUldCGU7a1ZMeHh+Lcva3Vrc7K7lxZwl1dx7i4gobkUIJCQfBsF2wrcjXDWWZyM1/JaE/CK82ULcNSewBpJHAZPlw5rYxA6BQ9qjGSOQgKepR154rV1wVGKVLWQHuflM7w3UAqroxkw9AHH8/RtZYwsa8dJuncBtNqIBHAaAn4gsOuPnG7og6ju4/1GRsbGwcjD+kVw+ZQJaqLVUXZpd6DQS5jtQyltqw5/LuQ1amHuT377wRvW6lnH4TAeRH4KjY4z8mQevEtpLc/Mkrmf4NH4TFqPA9XSij60d38KYAhlBMrmPsWxlQgfi99PN4ogZrGzZchLSUEpo1OF05WJWgwkJEGhe01zyd6FzORyD+RUnqZRFkh9Hg5Ks35q41stbKC7+yJgr04DkCXx0Qqw/UbxO2JO4Eq8Dly63xqR/PlxSpDsGpfQodt+BjOqzthzQqDgw1N/ngDSZ4Ffkr0QQ8ynuVfNmVBX8VxBWwbR4RaoCLyVBoeB9UIxUgd0oHBxPJTvRju2onDz4CpA6lDiivnBcdGOoW/ej81JegzBS2GO3P1RAUZ8teO/poZmAZkbm31FvE1LVM60ejYJ8Ayz9DgmjSTUxMSDbQZLb18Ef6QuGEZRLGh13qsQPM1GxAJL16jdH9jBwSxmLA8l/RxW78MV/tjnF6ASnfdJ4rd3xyiMssu21EmY3H1IWH4jYaQ6YKpo1CdMldbTVswBSX7+rKPpGAn81UHHVQwvR/E4AJUu+OKnZU83RiA7J8U/GJyEyJCSQlkkDwbghOUxihfOJPP4qt7d3c3ZsahUHYbaDQGVhW/2pqYMugHyoF32Hrh5+C1iIPyJq2bypliclW24r6d9W1QkGuSFcL1BHi5CgcIk7VrpbGxi1Eerw4NP5w9hC4ZxezsiHdLbUOpmpcv9rT8NxrI3hIWyrIF8IMP0YRVZYTU0dpQJou6NEN6CZThYzR3zPRf7QYDo77HvMl9iqCAsEx5yrOk1TTILgY0uFcq0lL2YWyuDja8jszZB6ws2sME8kR6PPsJ7A6wMWSuDtYM5iG3hKgy+rIjuXD0i8sC94DHdT+IoWqw9AiF2BoeQlIPu0KIgIKEIvU+dfWV8A53wlQPZ0zCB04pj8K0JJOwS34WmgOye7o+zKaOSlha3eRM5gkbwEEg4HhMNKlKlQoXT+y93e8OSP01vEc4DpXRDLJNyuYJbxZxjDcdpeEiXi+VPWG4tyHNvSOgpRFirO/GCXV7TO0VqpPcBlUBSk/Hct8xKxcOESwPugE4GvFBzzIUbpkPHDuOifDkt07UkvPj0+qeEM0LHYJvVOXEBrIaxiC28hbxOLZEdQuNLSYajnQZCake3DkK7bwajncjByeRwC78S73mbdyd0kLMbxCDeQrkRP2ghPe/ZEUtHy5xpsenei69lpDWWE9DuxV3qVITwAGjuCROhv8cfDAEWepUpOIBxCcjqVIZg5isGg4Qs+sd+kHzYqD87MNaa9M0zIQ3hYv8Hc1OsgmfyXgETKi3hwCQ7hGyxmIQ3q7nQWWFY4AWUhn4iDt63ivzMGuAjX9q/4lRxGSx0QH67qj9uM0nxYEdweZmAQUGKSb3+ZIQu2o2WHHdc7dNCUUe3HOc/7EqFNTEmsUpH1HeEkKiQSSXVh3ls5MHIYUIZPiSIneSYN4d9S6UNS9vrHotL4up4WGjr0DCxPqPViTsr9EGu1F1P26RnBtrD42qtYEnh+dHfE5tyySv8Xdgd4f+onTvZpuk3/fscQ/yTC3/1+H88EN6c9i/G8E/nLTN2u/0ZHQAACjppQ0NQUGhvdG9zaG9wIElDQyBwcm9maWxlAAB4nJ2Wd1RU1xaHz713eqHNMBQpQ++9DSC9N6nSRGGYGWAoAw4zNLEhogIRRUQEFUGCIgaMhiKxIoqFgGDBHpAgoMRgFFFReTOyVnTl5b2Xl98fZ31rn733PWfvfda6AJC8/bm8dFgKgDSegB/i5UqPjIqmY/sBDPAAA8wAYLIyMwJCPcOASD4ebvRMkRP4IgiAN3fEKwA3jbyD6HTw/0malcEXiNIEidiCzclkibhQxKnZggyxfUbE1PgUMcMoMfNFBxSxvJgTF9nws88iO4uZncZji1h85gx2GlvMPSLemiXkiBjxF3FRFpeTLeJbItZMFaZxRfxWHJvGYWYCgCKJ7QIOK0nEpiIm8cNC3ES8FAAcKfErjv+KBZwcgfhSbukZuXxuYpKArsvSo5vZ2jLo3pzsVI5AYBTEZKUw+Wy6W3paBpOXC8DinT9LRlxbuqjI1ma21tZG5sZmXxXqv27+TYl7u0ivgj/3DKL1fbH9lV96PQCMWVFtdnyxxe8FoGMzAPL3v9g0DwIgKepb+8BX96GJ5yVJIMiwMzHJzs425nJYxuKC/qH/6fA39NX3jMXp/igP3Z2TwBSmCujiurHSU9OFfHpmBpPFoRv9eYj/ceBfn8MwhJPA4XN4oohw0ZRxeYmidvPYXAE3nUfn8v5TE/9h2J+0ONciURo+AWqsMZAaoALk1z6AohABEnNAtAP90Td/fDgQv7wI1YnFuf8s6N+zwmXiJZOb+DnOLSSMzhLysxb3xM8SoAEBSAIqUAAqQAPoAiNgDmyAPXAGHsAXBIIwEAVWARZIAmmAD7JBPtgIikAJ2AF2g2pQCxpAE2gBJ0AHOA0ugMvgOrgBboMHYASMg+dgBrwB8xAEYSEyRIEUIFVICzKAzCEG5Ah5QP5QCBQFxUGJEA8SQvnQJqgEKoeqoTqoCfoeOgVdgK5Cg9A9aBSagn6H3sMITIKpsDKsDZvADNgF9oPD4JVwIrwazoML4e1wFVwPH4Pb4Qvwdfg2PAI/h2cRgBARGqKGGCEMxA0JRKKRBISPrEOKkUqkHmlBupBe5CYygkwj71AYFAVFRxmh7FHeqOUoFmo1ah2qFFWNOoJqR/WgbqJGUTOoT2gyWgltgLZD+6Aj0YnobHQRuhLdiG5DX0LfRo+j32AwGBpGB2OD8cZEYZIxazClmP2YVsx5zCBmDDOLxWIVsAZYB2wglokVYIuwe7HHsOewQ9hx7FscEaeKM8d54qJxPFwBrhJ3FHcWN4SbwM3jpfBaeDt8IJ6Nz8WX4RvwXfgB/Dh+niBN0CE4EMIIyYSNhCpCC+ES4SHhFZFIVCfaEoOJXOIGYhXxOPEKcZT4jiRD0ie5kWJIQtJ20mHSedI90isymaxNdiZHkwXk7eQm8kXyY/JbCYqEsYSPBFtivUSNRLvEkMQLSbyklqSL5CrJPMlKyZOSA5LTUngpbSk3KabUOqkaqVNSw1Kz0hRpM+lA6TTpUumj0lelJ2WwMtoyHjJsmUKZQzIXZcYoCEWD4kZhUTZRGiiXKONUDFWH6kNNppZQv6P2U2dkZWQtZcNlc2RrZM/IjtAQmjbNh5ZKK6OdoN2hvZdTlnOR48htk2uRG5Kbk18i7yzPkS+Wb5W/Lf9ega7goZCisFOhQ+GRIkpRXzFYMVvxgOIlxekl1CX2S1hLipecWHJfCVbSVwpRWqN0SKlPaVZZRdlLOUN5r/JF5WkVmoqzSrJKhcpZlSlViqqjKle1QvWc6jO6LN2FnkqvovfQZ9SU1LzVhGp1av1q8+o66svVC9Rb1R9pEDQYGgkaFRrdGjOaqpoBmvmazZr3tfBaDK0krT1avVpz2jraEdpbtDu0J3XkdXx08nSadR7qknWddFfr1uve0sPoMfRS9Pbr3dCH9a30k/Rr9AcMYANrA67BfoNBQ7ShrSHPsN5w2Ihk5GKUZdRsNGpMM/Y3LjDuMH5homkSbbLTpNfkk6mVaappg+kDMxkzX7MCsy6z3831zVnmNea3LMgWnhbrLTotXloaWHIsD1jetaJYBVhtseq2+mhtY823brGestG0ibPZZzPMoDKCGKWMK7ZoW1fb9banbd/ZWdsJ7E7Y/WZvZJ9if9R+cqnOUs7ShqVjDuoOTIc6hxFHumOc40HHESc1J6ZTvdMTZw1ntnOj84SLnkuyyzGXF66mrnzXNtc5Nzu3tW7n3RF3L/di934PGY/lHtUejz3VPRM9mz1nvKy81nid90Z7+3nv9B72UfZh+TT5zPja+K717fEj+YX6Vfs98df35/t3BcABvgG7Ah4u01rGW9YRCAJ9AncFPgrSCVod9GMwJjgouCb4aYhZSH5IbyglNDb0aOibMNewsrAHy3WXC5d3h0uGx4Q3hc9FuEeUR4xEmkSujbwepRjFjeqMxkaHRzdGz67wWLF7xXiMVUxRzJ2VOitzVl5dpbgqddWZWMlYZuzJOHRcRNzRuA/MQGY9czbeJ35f/AzLjbWH9ZztzK5gT3EcOOWciQSHhPKEyUSHxF2JU0lOSZVJ01w3bjX3ZbJ3cm3yXEpgyuGUhdSI1NY0XFpc2imeDC+F15Oukp6TPphhkFGUMbLabvXu1TN8P35jJpS5MrNTQBX9TPUJdYWbhaNZjlk1WW+zw7NP5kjn8HL6cvVzt+VO5HnmfbsGtYa1pjtfLX9j/uhal7V166B18eu612usL1w/vsFrw5GNhI0pG38qMC0oL3i9KWJTV6Fy4YbCsc1em5uLJIr4RcNb7LfUbkVt5W7t32axbe+2T8Xs4mslpiWVJR9KWaXXvjH7puqbhe0J2/vLrMsO7MDs4O24s9Np55Fy6fK88rFdAbvaK+gVxRWvd8fuvlppWVm7h7BHuGekyr+qc6/m3h17P1QnVd+uca1p3ae0b9u+uf3s/UMHnA+01CrXltS+P8g9eLfOq669Xru+8hDmUNahpw3hDb3fMr5talRsLGn8eJh3eORIyJGeJpumpqNKR8ua4WZh89SxmGM3vnP/rrPFqKWuldZachwcFx5/9n3c93dO+J3oPsk42fKD1g/72ihtxe1Qe277TEdSx0hnVOfgKd9T3V32XW0/Gv94+LTa6ZozsmfKzhLOFp5dOJd3bvZ8xvnpC4kXxrpjux9cjLx4qye4p/+S36Urlz0vX+x16T13xeHK6at2V09dY1zruG59vb3Pqq/tJ6uf2vqt+9sHbAY6b9je6BpcOnh2yGnowk33m5dv+dy6fnvZ7cE7y+/cHY4ZHrnLvjt5L/Xey/tZ9+cfbHiIflj8SOpR5WOlx/U/6/3cOmI9cmbUfbTvSeiTB2Ossee/ZP7yYbzwKflp5YTqRNOk+eTpKc+pG89WPBt/nvF8frroV+lf973QffHDb86/9c1Ezoy/5L9c+L30lcKrw68tX3fPBs0+fpP2Zn6u+K3C2yPvGO9630e8n5jP/oD9UPVR72PXJ79PDxfSFhb+BQOY8/w2HA/SAAANdmlUWHRYTUw6Y29tLmFkb2JlLnhtcAAAAAAAPD94cGFja2V0IGJlZ2luPSLvu78iIGlkPSJXNU0wTXBDZWhpSHpyZVN6TlRjemtjOWQiPz4KPHg6eG1wbWV0YSB4bWxuczp4PSJhZG9iZTpuczptZXRhLyIgeDp4bXB0az0iWE1QIENvcmUgNC40LjAtRXhpdjIiPgogPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4KICA8cmRmOkRlc2NyaXB0aW9uIHJkZjphYm91dD0iIgogICAgeG1sbnM6eG1wTU09Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9tbS8iCiAgICB4bWxuczpzdEV2dD0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL3NUeXBlL1Jlc291cmNlRXZlbnQjIgogICAgeG1sbnM6R0lNUD0iaHR0cDovL3d3dy5naW1wLm9yZy94bXAvIgogICAgeG1sbnM6ZGM9Imh0dHA6Ly9wdXJsLm9yZy9kYy9lbGVtZW50cy8xLjEvIgogICAgeG1sbnM6dGlmZj0iaHR0cDovL25zLmFkb2JlLmNvbS90aWZmLzEuMC8iCiAgICB4bWxuczp4bXA9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC8iCiAgIHhtcE1NOkRvY3VtZW50SUQ9ImdpbXA6ZG9jaWQ6Z2ltcDo2ZWEzNDhlNC1jNDc0LTRkZjMtYjY5Ny1mOGE1MDY0ZTk2ZjYiCiAgIHhtcE1NOkluc3RhbmNlSUQ9InhtcC5paWQ6MzdiOWM5YmQtNzdlNi00ZTNiLTlhNDUtNzE0NjU5YTNlZDllIgogICB4bXBNTTpPcmlnaW5hbERvY3VtZW50SUQ9InhtcC5kaWQ6NTU0NGY2NGItZTcxMC00M2IwLWIyOTctNmVhZGQ4ODEwMmU2IgogICBHSU1QOkFQST0iMi4wIgogICBHSU1QOlBsYXRmb3JtPSJXaW5kb3dzIgogICBHSU1QOlRpbWVTdGFtcD0iMTY2MzAwMjI4MDI4Mzg5MiIKICAgR0lNUDpWZXJzaW9uPSIyLjEwLjMyIgogICBkYzpGb3JtYXQ9ImltYWdlL3BuZyIKICAgdGlmZjpPcmllbnRhdGlvbj0iMSIKICAgeG1wOkNyZWF0b3JUb29sPSJHSU1QIDIuMTAiCiAgIHhtcDpNZXRhZGF0YURhdGU9IjIwMjI6MDk6MTJUMTk6MDQ6NDArMDI6MDAiCiAgIHhtcDpNb2RpZnlEYXRlPSIyMDIyOjA5OjEyVDE5OjA0OjQwKzAyOjAwIj4KICAgPHhtcE1NOkhpc3Rvcnk+CiAgICA8cmRmOlNlcT4KICAgICA8cmRmOmxpCiAgICAgIHN0RXZ0OmFjdGlvbj0ic2F2ZWQiCiAgICAgIHN0RXZ0OmNoYW5nZWQ9Ii8iCiAgICAgIHN0RXZ0Omluc3RhbmNlSUQ9InhtcC5paWQ6ODcxODk3MDEtNTU0Ny00ZDI2LWIzNTEtNjI4NjdiM2NhMGFmIgogICAgICBzdEV2dDpzb2Z0d2FyZUFnZW50PSJHaW1wIDIuMTAgKFdpbmRvd3MpIgogICAgICBzdEV2dDp3aGVuPSIyMDIyLTA5LTEyVDE5OjA0OjQwIi8+CiAgICA8L3JkZjpTZXE+CiAgIDwveG1wTU06SGlzdG9yeT4KICA8L3JkZjpEZXNjcmlwdGlvbj4KIDwvcmRmOlJERj4KPC94OnhtcG1ldGE+CiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAKPD94cGFja2V0IGVuZD0idyI/PvZ2GMcAAAo6aUNDUFBob3Rvc2hvcCBJQ0MgcHJvZmlsZQAASImdlndUVNcWh8+9d3qhzTAUKUPvvQ0gvTep0kRhmBlgKAMOMzSxIaICEUVEBBVBgiIGjIYisSKKhYBgwR6QIKDEYBRRUXkzslZ05eW9l5ffH2d9a5+99z1n733WugCQvP25vHRYCoA0noAf4uVKj4yKpmP7AQzwAAPMAGCyMjMCQj3DgEg+Hm70TJET+CIIgDd3xCsAN428g+h08P9JmpXBF4jSBInYgs3JZIm4UMSp2YIMsX1GxNT4FDHDKDHzRQcUsbyYExfZ8LPPIjuLmZ3GY4tYfOYMdhpbzD0i3pol5IgY8RdxURaXky3iWyLWTBWmcUX8VhybxmFmAoAiie0CDitJxKYiJvHDQtxEvBQAHCnxK47/igWcHIH4Um7pGbl8bmKSgK7L0qOb2doy6N6c7FSOQGAUxGSlMPlsult6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"
                                            alt="University of Vienna"
                                            style="
                                              display: block;
                                              border: 0;
                                              outline: none;
                                              text-decoration: none;
                                              -ms-interpolation-mode: bicubic;
                                              font-size: 12px;
                                            "
                                            title="University of Vienna"
                                          >
                                        </td>
                                      </tr>
                                    </tbody>
                                  </table>
                                </td>
                              </tr>
                            </table>
                          </td>
                        </tr>
                      </table>
                    </td>
                  </tr>
                </table>
              </td>
            </tr>
          </table>
          <table cellpadding="0" cellspacing="0" class="es-content" align="center" style="
                mso-table-lspace: 0pt;
                mso-table-rspace: 0pt;
                border-collapse: collapse;
                border-spacing: 0px;
                table-layout: fixed !important;
                width: 100%;
              ">
            <tr>
              <td align="center" style="padding: 0; margin: 0">
                <table bgcolor="#ffffff" class="es-content-body" align="center" cellpadding="0" cellspacing="0" style="
                      mso-table-lspace: 0pt;
                      mso-table-rspace: 0pt;
                      border-collapse: collapse;
                      border-spacing: 0px;
                      background-color: #ffffff;
                      width: 600px;
                      border-top-left-radius: 0.5rem !important;
                      border-top-right-radius: 0.5rem !important;
                    ">
                  <tr>
                    <td align="left" style="
                          padding: 0;
                          margin: 0;
                          padding-top: 15px;
                          padding-left: 20px;
                          padding-right: 20px;
                        ">
                      <table cellpadding="0" cellspacing="0" width="100%" style="
                            mso-table-lspace: 0pt;
                            mso-table-rspace: 0pt;
                            border-collapse: collapse;
                            border-spacing: 0px;
                          ">
                        <tr>
                          <td align="center" valign="top" style="padding: 0; margin: 0; width: 560px">
                            <table cellpadding="0" cellspacing="0" width="100%" role="presentation" style="
                                  mso-table-lspace: 0pt;
                                  mso-table-rspace: 0pt;
                                  border-collapse: collapse;
                                  border-spacing: 0px;
                                ">
                              <tr>
                                <td align="center" class="es-m-txt-c" style="
                                      padding: 0;
                                      margin: 0;
                                      padding-bottom: 10px;
                                    ">
                                  <h1 style="
                                        margin: 0;
                                        margin-top: 35px;
                                        line-height: 46px;
                                        mso-line-height-rule: exactly;
                                        font-family: arial, 'helvetica neue',
                                          helvetica, sans-serif;
                                        font-size: 24px;
                                        font-style: normal;
                                        font-weight: bold;
                                        color: #333333;
                                      ">
                                    {{.Greeting}}
                                  </h1>
                                </td>
                              </tr>
                            </table>
                          </td>
                        </tr>
                      </table>
                    </td>
                  </tr>
                </table>
              </td>
            </tr>
          </table>
          <table cellpadding="0" cellspacing="0" class="es-content" align="center" style="
                mso-table-lspace: 0pt;
                mso-table-rspace: 0pt;
                border-collapse: collapse;
                border-spacing: 0px;
                table-layout: fixed !important;
                width: 100%;
              ">
            <tr>
              <td align="center" style="padding: 0; margin: 0">
                <table bgcolor="#ffffff" class="es-content-body" align="center" cellpadding="0" cellspacing="0" style="
                      mso-table-lspace: 0pt;
                      mso-table-rspace: 0pt;
                      border-collapse: collapse;
                      border-spacing: 0px;
                      background-color: #ffffff;
                      width: 600px;
                      border-bottom-left-radius: 0.5rem !important;
                      border-bottom-right-radius: 0.5rem !important;
                    ">
                  <tr>
                    <td align="left" style="
                          padding: 0;
                          margin: 0;
                          padding-top: 10px;
                          padding-left: 20px;
                          padding-right: 20px;
                        ">
                      <table cellpadding="0" cellspacing="0" width="100%" style="
                            mso-table-lspace: 0pt;
                            mso-table-rspace: 0pt;
                            border-collapse: collapse;
                            border-spacing: 0px;
                          ">
                        <tr>
                          <td class="es-m-p0r" align="center" style="padding: 0; margin: 0; width: 560px">
                            <table cellpadding="0" cellspacing="0" width="100%" style="
                                  mso-table-lspace: 0pt;
                                  mso-table-rspace: 0pt;
                                  border-collapse: collapse;
                                  border-spacing: 0px;
                                  border-top: 2px solid #efefef;
                                  border-bottom: 2px solid #efefef;
                                " role="presentation">
                              <tr>
                                <td style="
                                      padding: 0;
                                      margin: 0;
                                      padding-top: 10px;
                                      padding-bottom: 10px;
                                    ">
                                  <p style="
                                        margin: 0;
                                        -webkit-text-size-adjust: none;
                                        -ms-text-size-adjust: none;
                                        mso-line-height-rule: exactly;
                                        font-family: arial, 'helvetica neue',
                                          helvetica, sans-serif;
                                        line-height: 21px;
                                        color: #333333;
                                        font-size: 14px;
                                      ">
                                    {{.Text}}
                                  </p>
                                </td>
                              </tr>
                            </table>
                          </td>
                        </tr>
                      </table>
                    </td>
                  </tr>

                  <tr>
                    <td align="center" vertical-align="middle"
                      style="font-size:0px;padding:25px 25px 10px 25px;word-break:break-word;">

                      <table border="0" cellpadding="0" cellspacing="0" role="presentation"
                        style="border-collapse:separate;line-height:100%;">
                        <tr>
                          <td align="center" bgcolor="#0063A6" role="presentation"
                            style="border:none;border-radius:6px;cursor:auto;mso-padding-alt:10px 25px;background:#0063A6;"
                            valign="middle">
                            <a href="https://photonq.org/email/verify?zitadelURL={{.URL}}"
                              rel="noopener noreferrer notrack"
                              style="display:inline-block;background:#0063A6;color:#ffffff;font-family:{{.FontFamily}};font-size:14px;font-weight:500;line-height:120%;margin:0;text-decoration:none;text-transform:none;padding:10px 25px;mso-padding-alt:0px;border-radius:6px;"
                              target="_blank">
                              {{.ButtonText}}
                            </a>
                          </td>
                        </tr>
                      </table>

                    </td>
                  </tr>

                  <tr>
                    <td align="left" style="
                          margin: 0;
                          padding-left: 20px;
                          padding-right: 20px;
                        ">
                      <!--[if mso]><table style="width:560px" cellpadding="0" cellspacing="0"><tr><td style="width:280px" valign="top"><![endif]-->

                      <!--[if mso]></td><td style="width:0px"></td><td style="width:280px" valign="top"><![endif]-->
                      <table cellpadding="0" cellspacing="0" class="es-right" align="right" style="
                            mso-table-lspace: 0pt;
                            mso-table-rspace: 0pt;
                            border-collapse: collapse;
                            border-spacing: 0px;
                            float: right;
                          ">
                        <tr>
                          <td class="es-m-p0r" align="center" style="padding: 0; margin: 0; width: 280px">
                            <table cellpadding="0" cellspacing="0" width="100%" role="presentation" style="
                                  mso-table-lspace: 0pt;
                                  mso-table-rspace: 0pt;
                                  border-collapse: collapse;
                                  border-spacing: 0px;
                                ">
                              <tr>
                                <td align="left" class="es-m-txt-l" style="padding: 0; margin: 0">
                                  <p style="
                                        margin: 0;
                                        -webkit-text-size-adjust: none;
                                        -ms-text-size-adjust: none;
                                        mso-line-height-rule: exactly;
                                        font-family: arial, 'helvetica neue',
                                          helvetica, sans-serif;
                                        line-height: 21px;
                                        color: #333333;
                                        font-size: 14px;
                                      "></p>
                                </td>
                              </tr>
                            </table>
                          </td>
                        </tr>
                      </table>
                      <!--[if mso]></td></tr></table><![endif]-->
                    </td>
                  </tr>
                  <tr>
                    <td align="left" style="
                          margin: 0;
                          padding-bottom: 10px;
                          padding-top: 15px;
                          padding-left: 20px;
                          padding-right: 20px;
                        ">
                      <table cellpadding="0" cellspacing="0" width="100%" style="
                            mso-table-lspace: 0pt;
                            mso-table-rspace: 0pt;
                            border-collapse: collapse;
                            border-spacing: 0px;
                          ">
                        <tr>
                          <td align="left" style="padding: 0; margin: 0; width: 560px">
                            <table cellpadding="0" cellspacing="0" width="100%" role="presentation" style="
                                  mso-table-lspace: 0pt;
                                  mso-table-rspace: 0pt;
                                  border-collapse: collapse;
                                  border-spacing: 0px;
                                ">
                              <tr>
                                <td align="center" style="
                                      padding: 0;
                                      margin: 0;
                                      padding-top: 10px;
                                      padding-bottom: 10px;
                                    ">
                                  <p style="
                                        margin: 0;
                                        -webkit-text-size-adjust: none;
                                        -ms-text-size-adjust: none;
                                        mso-line-height-rule: exactly;
                                        font-family: arial, 'helvetica neue',
                                          helvetica, sans-serif;
                                        line-height: 21px;
                                        color: #333333;
                                        font-size: 14px;
                                      ">
                                    Any questions? Feel free to email us at
                                    <a href="mailto: office@netsnek.com" target="_new" style="
                                          -webkit-text-size-adjust: none;
                                          -ms-text-size-adjust: none;
                                          mso-line-height-rule: exactly;
                                          text-decoration: underline;
                                          color: #5c68e2;
                                          font-size: 14px;
                                        "> office@netsnek.com</a>.
                                  </p>
                                </td>
                              </tr>
                            </table>
                          </td>
                        </tr>
                      </table>
                    </td>
                  </tr>
                </table>
              </td>
            </tr>
          </table>
          <table cellpadding="0" cellspacing="0" class="es-footer" align="center" style="
                mso-table-lspace: 0pt;
                mso-table-rspace: 0pt;
                border-collapse: collapse;
                border-spacing: 0px;
                table-layout: fixed !important;
                width: 100%;
                background-color: transparent;
                background-repeat: repeat;
                background-position: center top;
              ">
            <tr>
              <td align="center" style="padding: 0; margin: 0">
                <table class="es-footer-body" align="center" cellpadding="0" cellspacing="0" style="
                      mso-table-lspace: 0pt;
                      mso-table-rspace: 0pt;
                      border-collapse: collapse;
                      border-spacing: 0px;
                      background-color: transparent;
                      width: 640px;
                    ">
                  <tr>
                    <td align="left" style="
                          margin: 0;
                          padding-top: 20px;
                          padding-bottom: 20px;
                          padding-left: 20px;
                          padding-right: 20px;
                        ">
                      <table cellpadding="0" cellspacing="0" width="100%" style="
                            mso-table-lspace: 0pt;
                            mso-table-rspace: 0pt;
                            border-collapse: collapse;
                            border-spacing: 0px;
                          ">
                        <tr>
                          <td align="left" style="padding: 0; margin: 0; width: 600px">
                            <table cellpadding="0" cellspacing="0" width="100%" role="presentation" style="
                                  mso-table-lspace: 0pt;
                                  mso-table-rspace: 0pt;
                                  border-collapse: collapse;
                                  border-spacing: 0px;
                                ">
                              <tr>
                                <td align="center" style="
                                      padding: 0;
                                      margin: 0;
                                      padding-top: 15px;
                                      padding-bottom: 15px;
                                      font-size: 0;
                                    ">
                                  <table cellpadding="0" cellspacing="0" class="es-table-not-adapt es-social"
                                    role="presentation" style="
                                        mso-table-lspace: 0pt;
                                        mso-table-rspace: 0pt;
                                        border-collapse: collapse;
                                        border-spacing: 0px;
                                      ">
                                    <!-- <tr>
                                        <td
                                          align="center"
                                          valign="top"
                                          style="
                                            padding: 0;
                                            margin: 0;
                                            padding-right: 40px;
                                          "
                                        >
                                          <img
                                            title="Facebook"
                                            src="https://gjnbhn.stripocdn.email/content/assets/img/social-icons/logo-black/facebook-logo-black.png"
                                            alt="Fb"
                                            width="32"
                                            height="32"
                                            style="
                                              display: block;
                                              border: 0;
                                              outline: none;
                                              text-decoration: none;
                                              -ms-interpolation-mode: bicubic;
                                            "
                                          />
                                        </td>
                                        <td
                                          align="center"
                                          valign="top"
                                          style="
                                            padding: 0;
                                            margin: 0;
                                            padding-right: 40px;
                                          "
                                        >
                                          <img
                                            title="Twitter"
                                            src="https://gjnbhn.stripocdn.email/content/assets/img/social-icons/logo-black/twitter-logo-black.png"
                                            alt="Tw"
                                            width="32"
                                            height="32"
                                            style="
                                              display: block;
                                              border: 0;
                                              outline: none;
                                              text-decoration: none;
                                              -ms-interpolation-mode: bicubic;
                                            "
                                          />
                                        </td>
                                        <td
                                          align="center"
                                          valign="top"
                                          style="
                                            padding: 0;
                                            margin: 0;
                                            padding-right: 40px;
                                          "
                                        >
                                          <img
                                            title="Instagram"
                                            src="https://gjnbhn.stripocdn.email/content/assets/img/social-icons/logo-black/instagram-logo-black.png"
                                            alt="Inst"
                                            width="32"
                                            height="32"
                                            style="
                                              display: block;
                                              border: 0;
                                              outline: none;
                                              text-decoration: none;
                                              -ms-interpolation-mode: bicubic;
                                            "
                                          />
                                        </td>
                                        <td
                                          align="center"
                                          valign="top"
                                          style="padding: 0; margin: 0"
                                        >
                                          <img
                                            title="Youtube"
                                            src="https://gjnbhn.stripocdn.email/content/assets/img/social-icons/logo-black/youtube-logo-black.png"
                                            alt="Yt"
                                            width="32"
                                            height="32"
                                            style="
                                              display: block;
                                              border: 0;
                                              outline: none;
                                              text-decoration: none;
                                              -ms-interpolation-mode: bicubic;
                                            "
                                          />
                                        </td>
                                      </tr> -->
                                  </table>
                                </td>
                              </tr>
                              <tr>
                                <td align="center" style="
                                      padding: 0;
                                      margin: 0;
                                      padding-bottom: 35px;
                                    ">
                                  <p style="
                                        margin: 0;
                                        -webkit-text-size-adjust: none;
                                        -ms-text-size-adjust: none;
                                        mso-line-height-rule: exactly;
                                        font-family: arial, 'helvetica neue',
                                          helvetica, sans-serif;
                                        line-height: 18px;
                                        color: #333333;
                                        font-size: 12px;
                                      ">
                                    Powered by Netsnek&nbsp;© 2024 Netsnek&nbsp;All rights reserved.
                                  </p>
                                  <p style="
                                        margin: 0;
                                        -webkit-text-size-adjust: none;
                                        -ms-text-size-adjust: none;
                                        mso-line-height-rule: exactly;
                                        font-family: arial, 'helvetica neue',
                                          helvetica, sans-serif;
                                        line-height: 18px;
                                        color: #333333;
                                        font-size: 12px;
                                      ">
                                    Löwengasse 28, 1030 Vienna, Austria
                                  </p>
                                </td>
                              </tr>
                              <tr>
                                <td style="padding: 0; margin: 0">
                                  <table cellpadding="0" cellspacing="0" width="100%" class="es-menu"
                                    role="presentation" style="
                                        mso-table-lspace: 0pt;
                                        mso-table-rspace: 0pt;
                                        border-collapse: collapse;
                                        border-spacing: 0px;
                                      ">
                                    <tr class="links">
                                      <td align="center" valign="top" width="50%" style="
                                            margin: 0;
                                            padding-left: 5px;
                                            padding-right: 5px;
                                            padding-top: 5px;
                                            padding-bottom: 5px;
                                            border: 0;
                                          ">
                                        <a target="_blank" href="https://netsnek.com/" style="
                                              -webkit-text-size-adjust: none;
                                              -ms-text-size-adjust: none;
                                              mso-line-height-rule: exactly;
                                              text-decoration: none;
                                              display: block;
                                              font-family: arial,
                                                'helvetica neue', helvetica,
                                                sans-serif;
                                              color: #999999;
                                              font-size: 12px;
                                            ">Website</a>
                                      </td>
                                      <td align="center" valign="top" width="50%" style="
                                            margin: 0;
                                            padding-left: 5px;
                                            padding-right: 5px;
                                            padding-top: 5px;
                                            padding-bottom: 5px;
                                            border: 0;
                                            border-left: 1px solid #cccccc;
                                          ">
                                        <a target="_blank" href="https://netsnek.com/imprint" style="
                                              -webkit-text-size-adjust: none;
                                              -ms-text-size-adjust: none;
                                              mso-line-height-rule: exactly;
                                              text-decoration: none;
                                              display: block;
                                              font-family: arial,
                                                'helvetica neue', helvetica,
                                                sans-serif;
                                              color: #999999;
                                              font-size: 12px;
                                            ">Imprint</a>
                                      </td>
                                    </tr>
                                  </table>
                                </td>
                              </tr>
                            </table>
                          </td>
                        </tr>
                      </table>
                    </td>
                  </tr>
                </table>
              </td>
            </tr>
          </table>
        </td>
      </tr>
    </table>
  </div>
</body>

</html> # ZITADEL_DEFAULTINSTANCE_EMAILTEMPLATE
    ExternalPort: 443
    ExternalSecure: true
    ExternalDomain: accounts.photonq.org
    TLS:
      Enabled: false
    Database:
      Postgres:
        Host: db-postgresql
        Port: 5432
        Database: zitadel
        MaxOpenConns: 20
        MaxIdleConns: 10
        MaxConnLifetime: 30m
        MaxConnIdleTime: 5m
        User:
          Username: zitadel
          SSL:
            Mode: verify-full
        Admin:
          Username: postgres
          SSL:
            Mode: verify-full
  secretConfig:
    Database:
      Postgres:
        User:
          Password: xyz
        Admin:
          Password: abc

  dbSslCaCrtSecret: postgres-cert
  dbSslAdminCrtSecret: postgres-cert
  dbSslUserCrtSecret: zitadel-cert
