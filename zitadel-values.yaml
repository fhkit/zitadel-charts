zitadel:
  masterkey: x123456789012345678901234567891y
  configmapConfig:
    SystemDefaults:
      SecretGenerators:
        MachineKeySize: 2048 # ZITADEL_SYSTEMDEFAULTS_SECRETGENERATORS_MACHINEKEYSIZE
        ApplicationKeySize: 2048 # ZITADEL_SYSTEMDEFAULTS_SECRETGENERATORS_APPLICATIONKEYSIZE
      PasswordHasher:
        # Set hasher configuration for user passwords.
        # Passwords previously hashed with a different algorithm
        # or cost are automatically re-hashed using this config,
        # upon password validation or update.
        # Configure the Hasher config by environment variable using JSON notation:
        # ZITADEL_SYSTEMDEFAULTS_PASSWORDHASHER_HASHER='{"Algorithm":"pbkdf2","Rounds":290000,"Hash":"sha256"}'
        Hasher:
          # Supported algorithms: "argon2i", "argon2id", "bcrypt", "scrypt", "pbkdf2"
          # Depending on the algorithm, different configuration options take effect.
          Algorithm: bcrypt
          # Cost takes effect for the algorithms bcrypt and scrypt
          Cost: 14 # ZITADEL_SYSTEMDEFAULTS_PASSWORDHASHER_HASHER_COST
          # Time takes effect for the algorithms argon2i and argon2id
          Time: 3 # ZITADEL_SYSTEMDEFAULTS_PASSWORDHASHER_HASHER_TIME
          # Memory takes effect for the algorithms argon2i and argon2id
          Memory: 32768 # ZITADEL_SYSTEMDEFAULTS_PASSWORDHASHER_HASHER_MEMORY
          # Threads takes effect for the algorithms argon2i and argon2id
          Threads: 4 # ZITADEL_SYSTEMDEFAULTS_PASSWORDHASHER_HASHER_THREADS
          # Rounds takes effect for the algorithm pbkdf2
          Rounds: 290000 # ZITADEL_SYSTEMDEFAULTS_PASSWORDHASHER_HASHER_ROUNDS
          # Hash takes effect for the algorithm pbkdf2
          # Can be "sha1", "sha224", "sha256", "sha384" or "sha512"
          Hash: sha256 # ZITADEL_SYSTEMDEFAULTS_PASSWORDHASHER_HASHER_HASH

        # Verifiers enable the possibility of verifying
        # passwords that are previously hashed using another
        # algorithm then the Hasher.
        # This can be used when migrating from one algorithm to another,
        # or when importing users with hashed passwords.
        # There is no need to enable a Verifier of the same algorithm
        # as the Hasher.
        #
        # The format of the encoded hash strings must comply
        # with https://github.com/P-H-C/phc-string-format/blob/master/phc-sf-spec.md
        # https://passlib.readthedocs.io/en/stable/modular_crypt_format.html
        #
        # Supported verifiers: (uncomment to enable)
        Verifiers: "pbkdf2" # ZITADEL_SYSTEMDEFAULTS_PASSWORDHASHER_VERIFIERS
        #   - "argon2" # verifier for both argon2i and argon2id.
        #   - "bcrypt"
        #   - "md5"
        #   - "scrypt"
        #   - "pbkdf2" # verifier for all pbkdf2 hash modes.
      SecretHasher:
        # Set hasher configuration for machine users, API and OIDC client secrets.
        Hasher:
          # Supported algorithms: "argon2i", "argon2id", "bcrypt", "scrypt", "pbkdf2"
          # Depending on the algorithm, different configuration options take effect.
          Algorithm: bcrypt
          # Cost takes effect for the algorithms bcrypt and scrypt
          Cost: 4 # ZITADEL_SYSTEMDEFAULTS_SECRETHASHER_HASHER_COST
          # Time takes effect for the algorithms argon2i and argon2id
          Time: 3 # ZITADEL_SYSTEMDEFAULTS_SECRETHASHER_HASHER_TIME
          # Memory takes effect for the algorithms argon2i and argon2id
          Memory: 32768 # ZITADEL_SYSTEMDEFAULTS_SECRETHASHER_HASHER_MEMORY
          # Threads takes effect for the algorithms argon2i and argon2id
          Threads: 4 # ZITADEL_SYSTEMDEFAULTS_SECRETHASHER_HASHER_THREADS
          # Rounds takes effect for the algorithm pbkdf2
          Rounds: 290000 # ZITADEL_SYSTEMDEFAULTS_SECRETHASHER_HASHER_ROUNDS
          # Hash takes effect for the algorithm pbkdf2
          # Can be "sha1", "sha224", "sha256", "sha384" or "sha512"
          Hash: sha256 # ZITADEL_SYSTEMDEFAULTS_SECRETHASHER_HASHER_HASH
        Verifiers: # ZITADEL_SYSTEMDEFAULTS_SECRETHASHER_VERIFIERS
      Multifactors:
        OTP:
          # If this is empty, the issuer is the requested domain
          # This is helpful in scenarios with multiple ZITADEL environments or virtual instances
          Issuer: "NETSNEK" # ZITADEL_SYSTEMDEFAULTS_MULTIFACTORS_OTP_ISSUER
      DomainVerification:
        VerificationGenerator:
          Length: 32 # ZITADEL_SYSTEMDEFAULTS_DOMAINVERIFICATION_VERIFICATIONGENERATOR_LENGTH
          IncludeLowerLetters: true # ZITADEL_SYSTEMDEFAULTS_DOMAINVERIFICATION_VERIFICATIONGENERATOR_INCLUDELOWERLETTERS
          IncludeUpperLetters: true # ZITADEL_SYSTEMDEFAULTS_DOMAINVERIFICATION_VERIFICATIONGENERATOR_INCLUDEUPPERLETTERS
          IncludeDigits: true # ZITADEL_SYSTEMDEFAULTS_DOMAINVERIFICATION_VERIFICATIONGENERATOR_INCLUDEDIGITS
          IncludeSymbols: false # ZITADEL_SYSTEMDEFAULTS_DOMAINVERIFICATION_VERIFICATIONGENERATOR_INCLUDESYMBOLS
      Notifications:
        FileSystemPath: ".notifications/" # ZITADEL_SYSTEMDEFAULTS_NOTIFICATIONS_FILESYSTEMPATH
      KeyConfig:
        Size: 2048 # ZITADEL_SYSTEMDEFAULTS_KEYCONFIG_SIZE
        CertificateSize: 4096 # ZITADEL_SYSTEMDEFAULTS_KEYCONFIG_CERTIFICATESIZE
        PrivateKeyLifetime: 6h # ZITADEL_SYSTEMDEFAULTS_KEYCONFIG_PRIVATEKEYLIFETIME
        PublicKeyLifetime: 30h # ZITADEL_SYSTEMDEFAULTS_KEYCONFIG_PUBLICKEYLIFETIME
        # 8766h are 1 year
        CertificateLifetime: 8766h # ZITADEL_SYSTEMDEFAULTS_KEYCONFIG_CERTIFICATELIFETIME
    DefaultInstance:
      EmailTemplate:  # ZITADEL_DEFAULTINSTANCE_EMAILTEMPLATE
    ExternalPort: 443
    ExternalSecure: true
    ExternalDomain: accounts.photonq.org
    TLS:
      Enabled: false
    Database:
      Postgres:
        Host: db-postgresql
        Port: 5432
        Database: zitadel
        MaxOpenConns: 20
        MaxIdleConns: 10
        MaxConnLifetime: 30m
        MaxConnIdleTime: 5m
        User:
          Username: zitadel
          SSL:
            Mode: verify-full
        Admin:
          Username: postgres
          SSL:
            Mode: verify-full
  secretConfig:
    Database:
      Postgres:
        User:
          Password: xyz
        Admin:
          Password: abc

  dbSslCaCrtSecret: postgres-cert
  dbSslAdminCrtSecret: postgres-cert
  dbSslUserCrtSecret: zitadel-cert
